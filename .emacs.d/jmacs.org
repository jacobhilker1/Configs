#+title: Jmacs (Jacob's Literate Emacs Config)
#+author: Jacob Hilker
#+startup: fold
#+property: header-args :tangle jmacs.el

Welcome to JMacs! This is a my personal configuration of emacs, for solo RPG campaigns like [[https://www.ironswornrpg.com/][Ironsworn]], writing (both prose and code), and for general use. I have organized this file into different sections, such as the functions I use, the UI settings, etc.

* Table of Contents :toc:
- [[#early-initialization][Early Initialization]]
  - [[#disabling-packageel][Disabling Package.el]]
- [[#general-initialization][General Initialization]]
  - [[#setting-up-straightel][Setting Up Straight.el]]
  - [[#setting-up-use-package-with-straightel][Setting Up Use-Package with Straight.el]]
  - [[#org-mode][Org Mode]]
- [[#initial-setup][Initial Setup]]
- [[#core-functionality][Core Functionality]]
  - [[#undo-tree][Undo Tree]]
  - [[#evil-mode][Evil Mode]]
  - [[#general][General]]
  - [[#which-key][Which-Key]]
  - [[#hydra][Hydra]]
  - [[#helpful][Helpful]]
  - [[#treemacs][Treemacs]]
  - [[#imenu-list][Imenu-List]]
- [[#ide-configuration][IDE Configuration]]
  - [[#completion-frameworks][Completion Frameworks]]
  - [[#projectile][Projectile]]
  - [[#magit][Magit]]
  - [[#smartparens][Smartparens]]
- [[#org-mode-1][Org Mode]]
  - [[#general-customization][General Customization]]
  - [[#ui-tweaks][UI Tweaks]]
  - [[#org-tempo][Org Tempo]]
  - [[#org-superstar][Org Superstar]]
  - [[#org-super-agenda][Org Super Agenda]]
  - [[#org-toc][Org TOC]]
- [[#mu4e][Mu4e]]
  - [[#initial-setup-1][Initial Setup]]
  - [[#account-setup][Account Setup]]
  - [[#org-msg][Org-Msg]]
  - [[#mu4e-dashboard][Mu4e Dashboard]]
- [[#elfeed][Elfeed]]
  - [[#package-setup][Package Setup]]
  - [[#helpers][Helpers]]
  - [[#elfeed-org][Elfeed Org]]
  - [[#elfeed-dashboard][Elfeed Dashboard]]
  - [[#elfeed-goodies][Elfeed Goodies]]
  - [[#bindings][Bindings]]
- [[#ui-tweaks-1][UI Tweaks]]
  - [[#minimalistic-ui][Minimalistic UI]]
  - [[#fonts][Fonts]]
  - [[#themes][Themes]]
  - [[#modeline][Modeline]]
  - [[#tabs][Tabs]]
- [[#keybindings][Keybindings]]
  - [[#general-keybindings][General Keybindings]]
  - [[#application-bindings][Application Bindings]]
  - [[#buffer-keybindings][Buffer Keybindings]]
  - [[#file-keybindings][File Keybindings]]
  - [[#window-keybindings][Window Keybindings]]
- [[#minor-tweaks][Minor Tweaks]]
  - [[#tab-in-insert-mode-indents][Tab in Insert Mode Indents]]

* Early Initialization
:properties:
:header-args: :tangle early-init.el 
:end:
** Disabling Package.el 
By default, I want to use straight.el as my package manager.
#+begin_src emacs-lisp
(setq package-enable-at-startup nil)
#+end_src

* General Initialization
:properties:
:header-args: :tangle init.el
:end:
** Setting Up Straight.el
I am using straight.el for my packages.
#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
    (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
    (bootstrap-version 5))
(unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
        "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
        'silent 'inhibit-cookies)
    (goto-char (point-max))
    (eval-print-last-sexp)))
(load bootstrap-file nil 'nomessage))
#+end_src

** Setting Up Use-Package with Straight.el
Use-package provides an easy-to-use macro - I like that, but want the functionality of straight.el.
#+begin_src emacs-lisp
(straight-use-package 'use-package)
#+end_src

And finally, I always want it to use straight.el.
#+begin_src emacs-lisp
(setq straight-use-package-by-default t)
#+end_src

** Org Mode
I want to use the newest version of org-mode instead of the one built in to emacs.
#+begin_src emacs-lisp
(straight-use-package '(org-plus-contrib :includes org))
#+end_src
And finally, I want to load the literate config.
#+begin_src emacs-lisp
(org-babel-load-file "~/.emacs.d/jmacs.org")
#+end_src



* Initial Setup
This is where I setup my initial personal information, as well as a minimal UI and enabling the visual bell.
#+begin_src emacs-lisp
(setq visible-bell t)
#+end_src

Now I want to disable automatic indentation with electric-indent-mode, and disable tabs.
#+begin_src emacs-lisp
(electric-indent-mode -1)
(setq-default indent-tabs-mode nil)
(setq tab-always-indent 'complete)
#+end_src

* Core Functionality
** Undo Tree
Undo Tree lets me use more of Evil mode's redo functionality.
#+begin_src emacs-lisp
(use-package undo-tree
:config
 (global-undo-tree-mode))
#+end_src

** Evil Mode
Evil mode lets me use the (superior) Vim bindings to the Emacs ones. In addition, I don’t want :q to kill emacs, but rather the current buffer I am in (similar to Vim).
*** Evil-mode Core
This is the core of evil mode.
#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-undo-system 'undo-tree)
  (setq evil-want-C-i-jump nil) 
  (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  (setq evil-want-keybinding nil)
  :config
  ;(evil-set-undo-system 'undo-tree)
  ;(setq evil-undo-system 'undo-tree)
  (evil-mode 1)
  :preface
  (defun ian/save-and-kill-this-buffer ()
    (interactive)
    (save-buffer)
    (kill-this-buffer))
  :config
  (with-eval-after-load 'evil-maps ; avoid conflict with company tooltip selection
    (define-key evil-insert-state-map (kbd "C-n") nil)
    (define-key evil-insert-state-map (kbd "C-p") nil))
  (evil-ex-define-cmd "q" #'kill-this-buffer)
  (evil-ex-define-cmd "wq" #'ian/save-and-kill-this-buffer))
#+end_src
*** Evil-mode Collection
This provides a collection of modules for using evil mode in other emacs programs.
#+begin_src emacs-lisp
(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))
#+end_src
** General
#+begin_src emacs-lisp
(use-package general)
#+end_src

** Which-Key
Which-key lets me see what keybindings I can use.
#+begin_src emacs-lisp
(use-package which-key
:config
(which-key-mode 1))
#+end_src

** Hydra
I want to use hydras for certain things - namely, elfeed filters.
#+begin_src emacs-lisp
(use-package hydra)
#+end_src

** Helpful
Helpful allows me to have a better view of a help buffer.
#+begin_src emacs-lisp
(use-package helpful
    :config
    (setq counsel-describe-function-function #'helpful-callable)
    (setq counsel-describe-variable-function #'helpful-variable))
#+end_src

** Treemacs
Treemacs allows me to set up a sidebar with project information.
#+begin_src emacs-lisp
(use-package treemacs
  :config
  (setq treemacs-persist-file "~/.emacs.d/.local/cache/treemacs.org"))
#+end_src

** Imenu-List
Imenu-list lets me look at the file as a list.
#+begin_src emacs-lisp
(use-package imenu-list)
#+end_src

* IDE Configuration
** Completion Frameworks
*** Counsel
#+begin_src emacs-lisp
(use-package counsel
  :config
  (counsel-mode 1))
#+end_src

*** Ivy
#+begin_src emacs-lisp
(use-package ivy
  :defer 0.1
  :diminish
 :config
 (setq ivy-count-format "(%d/%d) ")
 (ivy-mode 1))
#+end_src

**** Ivy Posframe
Ivy Posframe makes it much easier to edit the ivy ui.
**** Ivy Rich
Ivy Rich will allow me to see more about each command
#+begin_src emacs-lisp
  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))
#+end_src

*** Swiper
#+begin_src emacs-lisp
 (use-package swiper
:after ivy)
#+end_src

*** Company

** Projectile
** Magit
Magit is an incredible git client for emacs.

#+begin_src emacs-lisp

#+end_src

** Smartparens
#+begin_src emacs-lisp
(use-package smartparens
  :config
  (smartparens-global-mode))
#+end_src

* Org Mode
** General Customization
I keep my agenda files in Dropbox so that I can access them on any computer. In addition, I want a different ellipsis instead of the three periods.
#+begin_src emacs-lisp
(setq org-agenda-files '("~/Dropbox/org/agenda.org" "~/Dropbox/notes/spring2021.org")
        org-todo-keywords '(
            (sequence "TODO(t)" "INPR(i)" "NEXT(n)" "MEET(m)" "|" "SOMEDAY(s)"   "DONE(d)" "CANCELED(c)")
            (type "PROJ(p)")
            (type "BLOG(b)"))
        org-ellipsis " ▼ "
        org-todo-keyword-faces
        '(
          ("TODO" . (:foreground "#cc241d" :weight black :underline t))
          ("INPR" . (:foreground "#fe8019" :weight bold))
          ("NEXT" . (:foreground "#fabd2f" :weight black))
          ("MEET" . (:foreground "#b8bb26" :weight bold))
          ("PROJ" . (:foreground "#458588" :slant italic :weight bold))
          ("BLOG" . (:foreground "#83a598"))
          ("SOMEDAY" . (:foreground "#d3869b" :slant italic))
          ("DONE" . (:foreground "#83a598" :strike-through t))
          ("CANCELED" . (:foreground "cc241d" :strike-through t))))

;   ("DONE" . "green"))
#+end_src

*** Line Wrapping and Indentation
I want stuff to indent with the heading, and I want the lines to wrap.
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 
          (lambda () 
            (visual-line-mode 1)
            (org-indent-mode 1)))
#+end_src

** UI Tweaks
I want to hide formatting characters and leading stars.
#+begin_src emacs-lisp
(setq org-hide-emphasis-markers t
      org-hide-leading-stars t)
#+end_src

*** Clearer Faces
I like having different colors for faces.
#+begin_src emacs-lisp
(set-face-attribute 'org-level-1 nil :foreground "#83a598")
(set-face-attribute 'org-level-2 nil :foreground "#d3869b")
(set-face-attribute 'org-level-3 nil :foreground "#fabd2f")
(set-face-attribute 'org-level-4 nil :foreground "#fb4934")
(set-face-attribute 'org-level-5 nil :foreground "#83a598")
(set-face-attribute 'org-level-6 nil :foreground "#d3869b")
(set-face-attribute 'org-level-7 nil :foreground "#fabd2f")
(set-face-attribute 'org-level-8 nil :foreground "#fb4934")
#+end_src

*** Italic Comments
#+begin_src emacs-lisp

#+end_src

** Org Tempo
Org Tempo lets me use <s(tab) to insert blocks into an org-mode document.

#+begin_src emacs-lisp
(use-package org-tempo
    :straight nil
    :ensure nil)
#+end_src
*** Custom Keywords
This is where I want to add custom keywords for shortcut completion.
#+begin_src emacs-lisp

#+end_src

** Org Superstar
Org Superstar lets me use nicer bullets for my headers and formatting.
#+begin_src emacs-lisp
(use-package org-superstar
  :config
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
  (setq org-superstar-headline-bullets-list '("⚫" "○")))
#+end_src

** Org Super Agenda
*** Custom Agenda Commands
** Org TOC

This lets me insert a table of contents.
#+begin_src emacs-lisp
(use-package toc-org
  :hook org-mode)
#+end_src
* Mu4e
Mu4e is an excellent email client for emacs.
** Initial Setup
I am setting my maildir and my update function here.
#+begin_src emacs-lisp
(add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e") ;; On Ubuntu
(require 'mu4e);; on Ubuntu

(require 'org-mu4e) ;; On Ubuntu
(setq mu4e-maildir "~/.local/share/mail" 
      mu4e-get-mail-command "mbsync -aq"
      mail-user-agent 'mu4e-user-agent)
#+end_src

** Account Setup
Here is where I add my account information. This first section is for my personal accounts.
#+begin_src emacs-lisp
(setq mu4e-contexts
	(list
	 ;; Primary personal account
	 (make-mu4e-context
	  :name "jhilker2"
	  :match-func
	    (lambda (msg)
	      (when msg
		(string-prefix-p "/jacob.hilker2" (mu4e-message-field msg :maildir))))
	  :vars '((user-mail-address . "jacob.hilker2@gmail.com")
		  (user-full-name    . "Jacob Hilker")
		  (smtpmail-smtp-server  . "smtp.gmail.com")
		  (smtpmail-smtp-service . 465)
		  (smtpmail-stream-type  . ssl)
          (smtpmail-smtp-user . "jacob.hilker2@gmail.com")
		  (mu4e-drafts-folder  . "/jacob.hilker2@gmail.com/[Gmail]/Drafts")
		  (mu4e-sent-folder  . "/jacob.hilker2@gmail.com/[Gmail]/Sent Mail")
		  (mu4e-refile-folder  . "/jacob.hilker2@gmail.com/[Gmail]/All Mail")
		  (mu4e-trash-folder  . "/jacob.hilker2@gmail.com/[Gmail]/Trash")))

         (make-mu4e-context
	  ; Secondary personal account
	  :name "chilk"
	  :match-func
	    (lambda (msg)
	      (when msg
		(string-prefix-p "/jacob.hilker2" (mu4e-message-field msg :maildir))))
	  :vars '((user-mail-address . "camohilk@gmail.com")
		  (user-full-name    . "Jacob Hilker")
		  (smtpmail-smtp-server  . "smtp.gmail.com")
		  (smtpmail-smtp-service . 465)
		  (smtpmail-stream-type  . ssl)
          (smtpmail-smtp-user . "camohilk@gmail.com")
		  (mu4e-drafts-folder  . "/camohilk@gmail.com/[Gmail]/Drafts")
		  (mu4e-sent-folder  . "/camohilk@gmail.com/[Gmail]/Sent Mail")
		  (mu4e-refile-folder  . "/camohilk@gmail.com/[Gmail]/All Mail")
		  (mu4e-trash-folder  . "/camohilk@gmail.com/[Gmail]/Trash")))))
#+end_src

** Org-Msg
Org-msg lets me use org-mode syntax for formatting emails.
#+begin_src emacs-lisp
(use-package org-msg
  :config
  (setq org-msg-options "html-postamble:nil H:5 num:nil ^:{} toc:nil author:nil email:nil \\n:t"
	org-msg-startup "hidestars indent inlineimages"
	org-msg-greeting-name-limit 3
	org-msg-default-alternatives '((new		. (text html))
				       (reply-to-html	. (text html))
				       (reply-to-text	. (text)))
	org-msg-convert-citation t)
(org-msg-mode))
#+end_src

** TODO Mu4e Dashboard
#+begin_src emacs-lisp
(use-package mu4e-dashboard
  :straight (:host github :repo "rougier/mu4e-dashboard"))
#+end_src

*** TODO Sidebar

* Elfeed
Elfeed is an excellent package for reading RSS feeds in Emacs.
** Package Setup
This is the initial setup for my elfeed config.
#+begin_src emacs-lisp
(use-package elfeed
  :config
  (setq elfeed-db-directory "~/.elfeed/"
	elfeed-search-filter "@1-week-ago +unread "))
  
#+end_src

*** Bindings
These are the keybindings I have for my configuration.
#+begin_src emacs-lisp
(evil-define-key 'normal elfeed-search-mode-map (kbd "A") 'elfeed-mark-all-as-read)
(evil-define-key 'normal elfeed-search-mode-map (kbd "/") 'elfeed-search-live-filter)
(evil-define-key 'normal elfeed-search-mode-map (kbd "f") 'jh/elfeed-search-hydra/body)
#+end_src

** Helpers
*** Hydra
I want to define a hydra for searching by various categories.
#+begin_src emacs-lisp
(defhydra jh/elfeed-search-hydra ()
  "Filter feeds" 
      ("d" (elfeed-search-set-filter "@1-week-ago +unread") "Default") 
      ("n" (elfeed-search-set-filter "@1-week-ago +unread +news") "News") 
      ("c" (elfeed-search-set-filter "@1-week-ago +unread +campaign") "Campaigns")  
      ("p" (elfeed-search-set-filter "+podcast") "Podcasts")  
      ("r" (elfeed-search-set-filter "@1-week-ago +unread +reddit") "Reddit")  
      ("b" (elfeed-search-set-filter "@1-week-ago +unread +blog") "Reddit")  
      
      ("q" nil "quit" :color red))
#+end_src

*** Mark All As Read
This is a function that just marks all the articles as read.
#+begin_src emacs-lisp
(defun elfeed-mark-all-as-read ()
	(interactive)
  (mark-whole-buffer)
  (elfeed-search-untag-all-unread))
#+end_src

** Elfeed Org
Elfeed org lets me use an org-mode file to keep track of my feeds.
#+begin_src emacs-lisp
(use-package elfeed-org
:after elfeed
:config
(elfeed-org)
(setq rmh-elfeed-org-files '("~/Dropbox/org/elfeed/feeds.org")))
#+end_src

** TODO Elfeed Dashboard
Elfeed dashboard lets me create a custom dashboard for running queries on articles.
#+begin_src emacs-lisp
(use-package elfeed-dashboard
  :straight (:host github :repo "Manoj321/elfeed-dashboard")
  :config
  (setq elfeed-dashboard-file "~/Dropbox/org/dashboard/elfeed.org"))

(evil-define-key 'normal elfeed-dashboard-mode-map
     "q" 'kill-current-buffer
    ;; "s" 'elfeed
     "U" 'elfeed-dashboard-update
     "u" (lambda () (interactive) (elfeed-dashboard-query "+unread")))
#+end_src

** Elfeed Goodies
Elfeed Goodies lets me have a nicer heading and layout for elfeed.
#+begin_src emacs-lisp
(use-package elfeed-goodies
  :config
  (elfeed-goodies/setup)
  (setq elfeed-goodies/entry-pane-size 0.5))
#+end_src

** Bindings
#+begin_src emacs-lisp
(evil-define-key 'normal elfeed-show-mode-map
  (kbd "J") 'elfeed-goodies/split-show-next
  (kbd "K") 'elfeed-goodies/split-show-prev)
(evil-define-key 'normal elfeed-search-mode-map
  (kbd "J") 'elfeed-goodies/split-show-next
  (kbd "K") 'elfeed-goodies/split-show-prev)
#+end_src

* UI Tweaks
** Minimalistic UI
I really hate seeing the menu bar, scrollbar, etc.
#+begin_src emacs-lisp
(scroll-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(menu-bar-mode -1)
#+end_src

** Fonts
I love Iosevka as a font. All the different variants help as well.
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "Iosevka Nerd Font" :height 120)
  (set-face-attribute 'org-meta-line nil :inherit 'default)
#+end_src

*** Variable Width
I like Iosevka Aile as a variable width font for content.
#+begin_src emacs-lisp
(set-face-attribute 'variable-pitch nil :font "Iosevka Aile" :height 120)
#+end_src

*** Italics for Comments
#+begin_src emacs-lisp
(set-face-attribute 'font-lock-comment-face nil :slant 'italic)
#+end_src

** Themes
The doom-themes collection has a lot of nice themes - I do overwrite some of the faces, though.
#+begin_src emacs-lisp
(use-package doom-themes)
(load-theme 'doom-gruvbox t)
#+end_src

** Modeline
Doom modeline allows me to have a cleaner modeline.
#+begin_src emacs-lisp
(use-package doom-modeline
  :config
  (setq doom-modeline-height 32))
(doom-modeline-mode 1)
#+end_src

** Tabs
I really like centaur-tabs for my config.
#+begin_src emacs-lisp
(use-package centaur-tabs
  :init
  (centaur-tabs-mode t)
  :config
  (setq centaur-tabs-set-modified-marker t
	centaur-tabs-modified-marker "•"
	centaur-tabs-set-bar 'left
	centaur-tabs-set-icons t
	centaur-tabs-set-close-button t
	centaur-tabs-close-button "x"
	centaur-tabs-style "bar"
	centaur-tabs-cycle-scope 'tabs)
  :bind
  (:map evil-normal-state-map
	("g t" . centaur-tabs-forward)
	("g T" . centaur-tabs-backward)))
#+end_src

* Keybindings
This section serves to describe the keybindings of Jmacs.
** General Keybindings
These are the core keybindings for functionality in jmacs.
#+begin_src emacs-lisp
(general-define-key
   :states '(normal visual insert emacs)
   :prefix "SPC"
   :non-normal-prefix "C-SPC"

    "SPC" '(counsel-M-x :which-key "M-x")
    "c"   (general-simulate-key "C-c")
    "h"   (general-simulate-key "C-h")
    "u"   (general-simulate-key "C-u")
    "x"   (general-simulate-key "C-x"))
#+end_src

** Application Bindings
This opens applications.
#+begin_src emacs-lisp
(general-define-key
   :states '(normal visual insert emacs)
   :prefix "SPC"
   :non-normal-prefix "C-SPC"
   "a" '(:ignore t :which-key "Applications")
   "am" '(mu4e :which-key "Open Email")
   "an" '(elfeed :which-key "Open News Reader"))

#+end_src

** Buffer Keybindings
These keybindings are for switching buffers.
#+begin_src emacs-lisp
(general-define-key
:states '(normal visual insert emacs)
:prefix "SPC"
:non-normal-prefix "C-SPC"


 "b"   '(:ignore t :which-key "Buffers")
 "bb"  'mode-line-other-buffer
 "bd"  'kill-this-buffer
 "bn"  'next-buffer
 "bp"  'previous-buffer
 "bq"  'kill-buffer-and-window
 "bR"  'rename-file-and-buffer
 "br"  'revert-buffer
 "bs" 'counsel-switch-buffer)
#+end_src

** File Keybindings
These are my keybindings for files.
#+begin_src emacs-lisp
(general-define-key
   :states '(normal visual insert emacs)
   :prefix "SPC"
   :non-normal-prefix "C-SPC"


   "f" '(:ignore t :which-key "Files")
   ; "fed" '(edit-dotfile :which-key "Edit Config")
   "ff" '(find-file :which-key "Find file")
   "fs" '(save-buffer :which-key "Save file")
   "fl" '(load-file :which-key "Load file"))

#+end_src

** Window Keybindings
#+begin_src emacs-lisp
(general-define-key
 :states '(normal visual insert emacs)
 :prefix "SPC"
 :non-normal-prefix "C-SPC"
 "w"  '(:ignore t :which-key "Windows")
 "w\\" '(split-window-right :which-key "Horizontal split")
 "w-" '(split-window-below :which-key "Vertical split")
 "wd"  '(delete-window :which-key "Delete window")
 "wD"  '(delete-other-windows :which-key "Delete other windows")
 "wm" '(maximize-window :which-key "Maximize window")
 "wh" '(evil-window-left :which-key "Move focus left")
 "wj" '(evil-window-down :which-key "Move focus down")
 "wk" '(evil-window-up :which-key "Move focus up")
 "wl" '(evil-window-right :which-key "Move focus right"))
#+end_src

* Minor Tweaks
** Tab in Insert Mode Indents
I want to insert indents myself.
#+begin_src emacs-lisp
(setq org-src-preserve-indentation t
      org-src-fontify-natively t
      org-src-tab-acts-natively t
      tab-width 4)
#+end_src
