#+title: Jmacs (Jacob's Literate Emacs Config)
#+author: Jacob Hilker
#+startup: fold
#+property: header-args :tangle jmacs.el

Welcome to JMacs! This is a my personal configuration of emacs, for solo RPG campaigns like [[https://www.ironswornrpg.com/][Ironsworn]], writing (both prose and code), and for general use. I have organized this file into different sections, such as the functions I use, the UI settings, etc.


* Initialization
** Early Initialization
:properties:
:header-args: :tangle early-init.el 
:end:
*** Disabling Package.el 
By default, I want to use straight.el as my package manager.
#+begin_src emacs-lisp
(setq package-enable-at-startup nil)
#+end_src

** General Initialization
:properties:
:header-args: :tangle init.el
:end:
*** Setting Up Straight.el
I am using straight.el for my packages.
#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
(expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
(bootstrap-version 5))
(unless (file-exists-p bootstrap-file)
(with-current-buffer
    (url-retrieve-synchronously
    "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
    'silent 'inhibit-cookies)
(goto-char (point-max))
(eval-print-last-sexp)))
(load bootstrap-file nil 'nomessage))
#+end_src

*** Setting Up Use-Package with Straight.el
Use-package provides an easy-to-use macro - I like that, but want the functionality of straight.el.
#+begin_src emacs-lisp
(straight-use-package 'use-package)
#+end_src

And finally, I always want it to use straight.el.
#+begin_src emacs-lisp
(setq straight-use-package-by-default t)
#+end_src

*** Org Mode
I want to use the newest version of org-mode instead of the one built in to emacs.
#+begin_src emacs-lisp
(straight-use-package '(org-contrib))
#+end_src
And finally, I want to load the literate config.
#+begin_src emacs-lisp
(org-babel-load-file "~/.emacs.d/jmacs.org")
#+end_src



* Initial Setup
This is where I setup my initial personal information, as well as a minimal UI and enabling the visual bell.
#+begin_src emacs-lisp
(setq user-full-name "Jacob Hilker"
      user-mail-address "jacob.hilker2@gmail.com"
      user-emacs-directory "~/.emacs.d/"
      custom-file "~/.emacs.d/custom.el"
      visible-bell t)

#+end_src

Now I want to disable automatic indentation with electric-indent-mode, and disable tabs.
#+begin_src emacs-lisp
(electric-indent-mode -1)
(setq-default indent-tabs-mode nil)
(setq tab-always-indent 'complete)
#+end_src

I also only want horizontal splits - none of this vertical split business unless I say so.
#+begin_src emacs-lisp

#+end_src
** Y/N for Yes/No
I also want to use y/n for answering yes or no.
#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** Emoji
Sometimes I want to add an emoji.
#+begin_src emacs-lisp
(use-package emojify
:hook (after-init . global-emojify-mode))
#+end_src

** Time And Date Modeline Format
I want to show the time, but not the mail or system load.
#+begin_src emacs-lisp
(setq display-time-default-load-average nil
      display-time-mail-string ""
      display-time-format "%H:%M %a, %d %b")
#+end_src

* Minor Tweaks
** Tab in Insert Mode Indents
I want to insert indents myself.
#+begin_src emacs-lisp
(setq org-src-preserve-indentation t
      org-src-fontify-natively t
      org-src-tab-acts-natively t
      tab-width 2)
#+end_src

*** Smarttab
#+begin_src emacs-lisp
(use-package smart-tab
  :init
  (smart-tab-mode 1))

#+end_src

** Scratch Buffer Uses Org Mode
#+begin_src emacs-lisp
(setq initial-major-mode 'org-mode
      initial-scratch-message nil)
#+end_src


** TODO Keep Folders Clean
I don't mind having auto-save files, but not in the current directory. I also don't want any lockfiles.
#+begin_src emacs-lisp
(setq backup-directory-alist `(("." . ,(expand-file-name ".tmp/backups/" user-emacs-directory))))
(setq create-lockfiles nil)
;; auto-save-mode doesn't create the path automatically!
(make-directory (expand-file-name ".tmp/auto-saves/" user-emacs-directory) t)

(setq auto-save-list-file-prefix (expand-file-name ".tmp/auto-saves/sessions/" user-emacs-directory)
      auto-save-file-name-transforms `((".*" ,(expand-file-name ".tmp/auto-saves/" user-emacs-directory) t)))
#+end_src

** Battery and Time In Modeline
I want to display the battery if I am on a laptop. In addition, I want to display the time.
#+begin_src emacs-lisp
(defun jh/emacs-init ()
  "Function that sets up time display and battery display, if applicable."
  (display-battery-mode 1))

(add-hook 'after-init-hook 'jh/emacs-init)
#+end_src

* Core Functionality
** Packages
*** Undo Tree
Undo Tree lets me use more of Evil mode's redo functionality.
#+begin_src emacs-lisp
(use-package undo-tree
:config
(global-undo-tree-mode))
#+end_src

*** Evil Mode
Evil mode lets me use the (superior) Vim bindings to the Emacs ones. In addition, I don’t want :q to kill emacs, but rather the current buffer I am in (similar to Vim).
**** Evil-mode Core
This is the core of evil mode.
#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-undo-system 'undo-tree)
  (setq evil-want-C-i-jump nil) 
  (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  (setq evil-want-keybinding nil)
  :config
  ;(evil-set-undo-system 'undo-tree)
  ;(setq evil-undo-system 'undo-tree)
  (evil-mode 1)
  :preface
  (defun ian/save-and-kill-this-buffer ()
    (interactive)
    (save-buffer)
    (kill-this-buffer))
  :config
  (with-eval-after-load 'evil-maps ; avoid conflict with company tooltip selection
    (define-key evil-insert-state-map (kbd "C-n") nil)
    (define-key evil-insert-state-map (kbd "C-p") nil))
  (evil-ex-define-cmd "q" #'kill-this-buffer)
  (evil-ex-define-cmd "wq" #'ian/save-and-kill-this-buffer))
#+end_src

**** Evil-mode Collection
This provides a collection of modules for using evil mode in other emacs programs.
#+begin_src emacs-lisp
(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))
#+end_src

**** Evil Org-Mode
#+begin_src emacs-lisp
(use-package evil-org
  :after org
  :hook (org-mode . evil-org-mode)
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))

#+end_src

*** General
#+begin_src emacs-lisp
(use-package general)
#+end_src

*** Which-Key
Which-key lets me see what keybindings I can use.
#+begin_src emacs-lisp
(use-package which-key
:config
(which-key-mode 1))
#+end_src

*** Hydra
I want to use hydras for certain things - namely, elfeed filters.
#+begin_src emacs-lisp
(use-package hydra)
#+end_src

*** Helpful
Helpful allows me to have a better view of a help buffer.
#+begin_src emacs-lisp
(use-package helpful
    :config
    (setq counsel-describe-function-function #'helpful-callable)
    (setq counsel-describe-variable-function #'helpful-variable))
#+end_src

*** Treemacs
Treemacs allows me to set up a sidebar with project information.
#+begin_src emacs-lisp
(use-package treemacs
  :config
  (setq treemacs-persist-file "~/.emacs.d/.local/cache/treemacs.org"))

(use-package treemacs-evil
:after evil treemacs
:ensure t)

(use-package treemacs-projectile
:after projectile treemacs
:ensure t)

(use-package treemacs-magit
:after magit treemacs
:ensure t)
#+end_src

*** Imenu-List
Imenu-list lets me look at the file as a list.
#+begin_src emacs-lisp
(use-package imenu-list)
#+end_src

*** Restart Emacs
#+begin_src emacs-lisp
(use-package restart-emacs)
#+end_src

*** YASnippet
YASnippet allows me to quickly insert snippets.
#+begin_src emacs-lisp
(use-package yasnippet
  :hook (after-init . yas-minor-mode))

(use-package yasnippet-snippets
:after yasnippet)
#+end_src

* General IDE Configuration
** Main Packages
*** LSP Mode
LSP Mode lets me get completion for functions and such in code. From the emacs-for-scratch youtube series.
#+begin_src emacs-lisp
(use-package lsp-mode
:hook ((prog-mode) . lsp-mode)
)
#+end_src
*** Completion Frameworks
**** Counsel
#+begin_src emacs-lisp
(use-package counsel
  :config
  (counsel-mode 1))
#+end_src

**** Ivy
#+begin_src emacs-lisp
(use-package ivy
  :defer 0.1
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-f" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (setq ivy-count-format "(%d/%d) "
        ivy-initial-inputs-alist nil)
  (ivy-mode 1))
#+end_src

***** Ivy Posframe
Ivy Posframe makes it much easier to edit the ivy ui.
***** Ivy Rich
Ivy Rich will allow me to see more about each command
#+begin_src emacs-lisp
  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))
#+end_src
***** Smex
Smex is a package the makes =M-x= remember our history.  Now M-x will show our last used commands first. (description courtesy of DistroTube)
#+begin_src emacs-lisp
(use-package smex)
(smex-initialize)
#+end_src
**** Swiper
#+begin_src emacs-lisp
 (use-package swiper
:after ivy)
#+end_src

**** Company
Company is a code completion framework.
#+begin_src emacs-lisp
;(use-package company
;:config
;(add-hook 'after-init-hook 'global-company-mode))
#+end_src

*** Projectile
Projectile is a tool for managing projects inside of emacs.
#+begin_src emacs-lisp

#+end_src

*** Magit
Magit is an incredible git client for emacs.

#+begin_src emacs-lisp
(use-package magit)

(use-package magit-todos
  :after magit)
#+end_src

*** Smartparens
   Smartparens inserts a matching delimiter if I insert 1 (like a second parenthesis if I insert a left one).
   #+begin_src emacs-lisp
(use-package smartparens
  :init
  (smartparens-global-mode))
#+end_src

*** Rainbow Delimiters
Rainbow Delimiters makes it so that parenthesis and other characters have their own colors - making it easier to follow the parenthesis, especially in something like lisp where there are so many parenthesis.
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook ((prog-mode) . rainbow-delimiters-mode))
#+end_src

** Language Configuration
*** BibTex/LaTeX
This is for working with my bibliography.
**** Company Backends
#+begin_src emacs-lisp
(use-package company-bibtex
  :config
  (add-to-list 'company-backends '(company-bibtex)))
#+end_src

*** Python 
Python is my primary language of choice.
#+begin_src emacs-lisp

#+end_src

* Org Mode
Org-Mode is THE absolute best thing about Emacs, in my humble opinion. Being able to keep notes and an agenda in the same file is so much easier than something like Notion which is pretty resource-intensive and is much harder to organize (in my opinion, at least). I highly respect what they are doing, but I prefer org-mode. My workflow is very much still in progress - for now, it's sort of a mix of GTD and my own thing. It will probably be constantly changing until I find what works for me.
** Initial Setup
This is a very basic function that sets up org-mode to use visual line mode, org-indent mode, and variable-pitch mode - just a few minor ui tweaks. It’s not really enough for me to put under the UI Tweaks section, though.
#+begin_src emacs-lisp
(defun jh/org-mode-setup ()
    "Makes a few minor ui adjustments for org-mode."
    (visual-line-mode 1)
    (variable-pitch-mode 1)
    (org-indent-mode 1))


(add-hook 'org-mode-hook 'jh/org-mode-setup)
#+end_src

** UI Tweaks
Org-mode has a very nice UI out of the box - however, there are a few things I would tweak about it just to get a better view for myself.
*** Cleaner View
I want to hide formatting characters (like forward-slashes for italics and asterisks for bold, as an example) and any leading stars for a nested heading (like a second-level header under a first-level heading). In addition, I want to use an arrow as my ellipsis, instead of the default three periods.
#+begin_src emacs-lisp
(setq org-hide-emphasis-markers t
      org-hide-leading-stars t
       org-ellipsis " ▼ ")
#+end_src

*** Clearer Faces
I like having different colors for different level headings - by default, in the doom-gruvbox theme, both first and second-level headings are green, which is harder for me to follow even I have text indented.
#+begin_src emacs-lisp
(set-face-attribute 'org-level-1 nil :foreground "#83a598")
(set-face-attribute 'org-level-2 nil :foreground "#d3869b")
(set-face-attribute 'org-level-3 nil :foreground "#fabd2f")
(set-face-attribute 'org-level-4 nil :foreground "#fb4934")
(set-face-attribute 'org-level-5 nil :foreground "#83a598")
(set-face-attribute 'org-level-6 nil :foreground "#d3869b")
(set-face-attribute 'org-level-7 nil :foreground "#fabd2f")
(set-face-attribute 'org-level-8 nil :foreground "#fb4934")
#+end_src

*** Nicer Bullets
I want to see an actual bullet point instead of a minus sign.
#+begin_src emacs-lisp
(font-lock-add-keywords 'org-mode
                        '(("^ +\\([-*]\\) "
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

(font-lock-add-keywords 'org-mode
                        '(("^ +\\([+*]\\) "
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

#+end_src

** Packages
Org-mode has a ton of packages that can extend it.
*** Built-In Packages
This section sets up any packages that are include with org-mode out of the box.

**** Org Tempo
Org Tempo lets me use <key(tab) to insert blocks into an org-mode document. As an example, I could use <s(tab) to insert a source code block.
#+begin_src emacs-lisp
(use-package org-tempo
    :straight nil
    :ensure nil)
#+end_src

*** Decide Mode 
Decide Mode allows me to quickly roll dice if I am in a campaign or need to choose something.
#+begin_src emacs-lisp

#+end_src

*** Deft
Deft allows me to sort through my org-roam notes.
#+begin_src emacs-lisp
(use-package deft)
#+end_src

*** DOCT
Declarative Org Capture Templates (aka DOCT) allows me to more easily create capture templates.
#+begin_src emacs-lisp
(use-package doct
  :commands (doct))
#+end_src

*** Export Backends
**** Hugo
I use hugo for my website, and having it in org-mode is great. In addition, being able to keep a blog pot in a subtree in one org-mode file makes it easier to find, in my opinion.
#+begin_src emacs-lisp
(use-package ox-hugo
:after ox)
#+end_src

**** Pandoc
Seems fairly straightforward - this allows me to export an org-mode file using pandoc.
#+begin_src emacs-lisp
(use-package ox-pandoc
:after ox)
#+end_src

*** Org Appear
This package makes it much easier to edit Org documents when org-hide-emphasis-markers is turned on. It temporarily shows the emphasis markers around certain markup elements when you place your cursor inside of them. No more fumbling around with = and * characters! (description credit to [[https://config.daviwil.com/emacs][David Wilson]] of the [[https://youtube.com/c/SystemCrafters][System Crafters]] youtube channel).
#+begin_src emacs-lisp
(use-package org-appear
  :hook (org-mode . org-appear-mode)
  :config
  (setq org-appear-autolinks t
        org-appear-autosubmarkers t
        org-appear-autoentities t))
#+end_src

*** Org Super Agenda
Org Super Agenda allows me to group items in an agenda much more easily than default.
#+begin_src emacs-lisp

#+end_src

*** Org QL
Org QL allows me to define queries for org-mode files.
#+begin_src emacs-lisp
(use-package org-ql)
#+end_src

*** Org-Ref
Org-Ref allows me to add citations to my files.
#+begin_src emacs-lisp
(use-package org-ref
  :straight (:files (:defaults (:exclude "*helm*")))
  :init
  (setq org-ref-completion-library 'org-ref-ivy-cite)
  :after (org))
#+end_src

*** Org Roam
Org Roam allows-me to keep a roam-style braindump like in notion.
#+begin_src emacs-lisp
(add-to-list 'load-path "~/anaconda3/bin") ;; since ubuntu is using the sqlite3 in anaconda - idk why but it is

(use-package org-roam
  :hook (org-mode . org-roam-mode)
  :config
  (setq org-roam-db-location "~/org/roam/org-roam.db"
        org-roam-directory "~/org/roam"))
#+end_src

*** Org Super Agenda
Org Super Agenda allows me to group items in the agenda much more easily than I can by default.
#+begin_src emacs-lisp
(use-package org-super-agenda
:config 
(org-super-agenda-mode 1))
#+end_src

*** Org Superstar
Org-superstar lets me use nicer bullets for my headers and formatting.
#+begin_src emacs-lisp
(use-package org-superstar
  :hook (org-mode . org-superstar-mode)
  :config
  (setq org-superstar-headline-bullets-list '("●" "○")
        org-superstar-special-todo-items t
        org-superstar-todo-bullet-alist '(("TODO" . ?☐)
                                         ("DONE" . ?))))
#+end_src

*** TOC-Org
#+begin_src emacs-lisp
(use-package toc-org
  :hook (org-mode . toc-org-mode))
#+end_src

** General Configuration
I keep my agenda files in Dropbox so that I can access them on any computer. In addition, I break my agenda files down into several smaller files - =projects.org= for larger projects, =todo.org= for small scale tasks (stuff like "take out the trash, etc"), =contacts.org= for any birthdays, and =agenda.org= for any general calendar items like a meeting or a campaign. 
#+begin_src emacs-lisp
(setq org-directory "~/Dropbox/org"
      org-agenda-files '("~/Dropbox/org/agenda.org" "~/Dropbox/org/projects.org" "~/Dropbox/org/contacts.org" "~/Dropbox/org/todo.org")
      org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
                          (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)"))
      org-todo-keyword-faces '(
                               ("TODO" . (:foreground "#cc241d" :weight bold :underline t))
                               ("NEXT" . (:foreground "#fe8019" :weight bold))
                               ("DONE" . (:foreground "#83a598" :weight bold :strike-through t))
                               ("WAITING" . (:foreground "#d3869b" :weight bold :slant italic))
                               ("CANCELLED" . (:foreground "#83a598" :weight bold :strike-through t))
                               ))      
#+end_src

** Categories and Tags
I use categories and tags to help me organize my work. Categories are what I use more for a context (such as appointments, projects, etc) and a tag is something more narrow within that project. This is where I define my global tags - such as a personal context, or something for work, or for family. In addition, I also use tags to represent the status of a project, such as whether it's active, or on the backlog, etc.
#+begin_src emacs-lisp
(setq org-tag-persistent-alist '(
                                 ;; Project Contexts
                                 (:startgroup)
                                 ("@personal" . ?p)
                                 ("@work" . ?w)
                                 (:endgroup)
                                 ;; Project Status
                                 (:startgroup)
                                 ("backlog" . ?b)
                                 ("plan" . ?P)
                                 ("ready" . ?r)
                                 ("active" . ?a)
                                 ("review" . ?v)
                                 ("completed" . ?c)
                                 (:endgroup)
                                 ("meeting" . ?m)
                                 ("inbox" . ?i)))
#+end_src

** Custom Agenda Commands
I have a few agenda commands I like to use - primarily, a dashboard and a planner, although I do have a project kanban board for any projects I am working on.
*** Dashboard
This dashboard view allows me to get a view of my day, along with my todo items. First is a daily schedule, and then any upcoming deadlines, and finally the inbox and then a general todo list. In addition, I don’t want to see any done tasks - this mostly looks forward.
#+begin_src emacs-lisp
(setq org-agenda-custom-commands
      '(
        ("d" "Daily Dashboard"
         (
          (agenda "" ((org-agenda-span 'day)
                      (org-agenda-overriding-header "Schedule")

                      (org-agenda-format-date "%a, %d %b")
                      (org-agenda-current-time-string "ᐊ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈ Now")
                      (org-agenda-time-grid '((today require-timed remove-match)()() "" "┈┈┈┈┈┈┈┈┈┈┈┈┈┈"))
                      (org-agenda-use-time-grid t)
                      (org-deadline-warning-days 14)
                      (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))))
                    
          (todo "" ((org-agenda-files '("~/Dropbox/org/inbox.org"))
                    (org-agenda-overriding-header "To Refile")
                    (org-agenda-show-inherited-tags nil)))

          (todo "" ((org-agenda-overriding-header "Email")
                    (org-super-agenda-groups 
                     '(
                       (:name none
                        :and (:category "Mail" :not (:date today :deadline today :scheduled today))
                        :discard (:anything))))))
          (todo "" ((org-agenda-overriding-header "Todo Items")
                    (org-agenda-files '("~/Dropbox/org/todo.org"))
                    (org-super-agenda-items '(
                                              (:name none
                                               :not (:category "Mail")
                                               :discard (:anything)))
                                              )))))))
          #+end_src

** Capture Templates
Capture Templates allow me to quickly get an idea down.

** TODO Refiling
I want to set up refiling here. As a main note, I want to archive everything under an “Archive” headline under the main context (such as Work, Personal, etc.)
#+begin_src emacs-lisp

#+end_src

*** Save After Refiling
#+begin_src emacs-lisp
(advice-add 'org-refile :after 'org-save-all-org-buffers)
#+end_src

** TODO Archiving
When I archive something, I want to have it go to the archive heading file.
#+begin_src emacs-lisp

#+end_src

** Functions
*** Calendar Export
I want to be able to export my org-mode agenda files to Google Calendar quickly and easily.
#+begin_src emacs-lisp

#+end_src

* Mu4e
Mu4e is an excellent email client for emacs.
** Initial Setup
I am setting my maildir and my update function here. in addition, I am telling emacs to sync my email every 10 minutes.
#+begin_src emacs-lisp
(add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e") ;; On Ubuntu
(require 'mu4e);; on Ubuntu

(require 'org-mu4e) ;; On Ubuntu
(setq mu4e-maildir "~/.local/share/mail"
      mu4e-get-mail-command "~/.bin/mailsync"
      mu4e-update-interval (* 5 60)
      mu4e-headers-skip-duplicates t
      message-send-mail-function 'smtpmail-send-it
      smtpmail-auth-credentials  (expand-file-name "~/.authinfo.gpg")
      mail-user-agent 'mu4e-user-agent)
#+end_src

** Filters

** Account Setup
Here is where I add my account information. This first section is for my personal accounts. I am using some of the gmail config settings from doom emacs to see if they work in my personal config.
*** Primary Personal Account
#+begin_src emacs-lisp
(setq mu4e-contexts
	(list
	 ;; Primary personal account
	 (make-mu4e-context
	  :name "jhilker2"
	  :match-func
	    (lambda (msg)
	      (when msg
		(string-prefix-p "/jacob.hilker2@gmail.com" (mu4e-message-field msg :maildir))))
	  :vars '((user-mail-address . "jacob.hilker2@gmail.com")
		  (user-full-name    . "Jacob Hilker")
		  (smtpmail-smtp-server  . "smtp.gmail.com")
		  (smtpmail-smtp-service . 465)
		  (smtpmail-stream-type  . ssl)
            (mu4e-sent-messages-behavior . delete)
            (mu4e-index-cleanup . nil)
            (mu4e-index-lazy-check . t)
            
            (mu4e-bookmarks . (("flag:unread AND NOT flag:trashed AND to:jacob.hilker2@gmail.com" "Unread messages" 117)
                               ("date:today..now AND to:jacob.hilker2@gmail.com" "Today's messages" 116)
                               ("date:7d..now AND to:jacob.hilker2@gmail.com" "Last 7 days" 119)
                               ("(from:BoardGameGeek AND Updated) or (from:gamersplane.com) or (from:rpol) or (from:rpg.net AND new) or (from:obsidianportal)" "Campaigns" ?c)
                               ("mime:image/* AND to:jacob.hilker2@gmail.com" "Messages with images" 112)))


	    (mu4e-drafts-folder  . "/jacob.hilker2@gmail.com/[Gmail]/Drafts")
	    (mu4e-sent-folder  . "/jacob.hilker2@gmail.com/[Gmail]/Sent Mail")
	    (mu4e-refile-folder  . "/jacob.hilker2@gmail.com/[Gmail]/All Mail")
		  (mu4e-trash-folder  . "/jacob.hilker2@gmail.com/Trash")))))
#+end_src

*** Secondary Personal Account
#+begin_src emacs-lisp
(add-to-list 'mu4e-contexts
(make-mu4e-context
	  :name "chilk"
	  :match-func
	    (lambda (msg)
	      (when msg
		(string-prefix-p "/camohilk" (mu4e-message-field msg :maildir))))
	  :vars '((user-mail-address . "camohilk@gmail.com")
		  (user-full-name    . "Jacob Hilker")
		  (smtpmail-smtp-server  . "smtp.gmail.com")
		  (smtpmail-smtp-service . 465)
		  (smtpmail-stream-type  . ssl)
          (mu4e-sent-messages-behavior . delete)
          (mu4e-index-cleanup . nil)
          (mu4e-index-lazy-check . t)
          (mu4e-bookmarks . (("flag:unread AND NOT flag:trashed AND to:camohilk@gmail.com" "Unread messages" 117)
                                ("date:today..now AND to:camohilk@gmail.com" "Today's messages" 116)
                                ("date:7d..now AND to:camohilk@gmail.com" "Last 7 days" 119)
                                ("mime:image/* AND to:camohilk@gmail.com" "Messages with images" 112)))


		  (mu4e-drafts-folder  . "/camohilk@gmail.com/[Gmail]/Drafts")
		  (mu4e-sent-folder  . "/camohilk@gmail.com/[Gmail]/Sent Mail")
		  (mu4e-refile-folder  . "/camohilk@gmail.com/[Gmail]/All Mail")
		  (mu4e-trash-folder  . "/camohilk@gmail.com/[Gmail]/Trash")))
'append)
#+end_src

** UI Tweaks
*** Better Date Format 
Day/Month/Year and 24-hour time is the way to go, in my opinion. I'm ust setting that up here.
#+begin_src emacs-lisp
(setq mu4e-headers-date-format "%d %b %Y"
      mu4e-headers-time-format "%H:%M")
#+end_src

*** Thread Folding
I want to hide any duplicate messages that are in the same thread.
#+begin_src emacs-lisp
(use-package mu4e-thread-folding
    :straight (:host github :repo "rougier/mu4e-thread-folding")
    :config
   (add-to-list 'mu4e-header-info-custom
             '(:empty . (:name "Empty"
                         :shortname ""
                         :function (lambda (msg) "  "))))
   
   (setq mu4e-thread-folding-default-view 'folded))
   
#+end_src

*** Better Headers
Taken from the doom emacs mu4e config.
#+begin_src emacs-lisp
(setq mu4e-headers-fields
        '(          
          (:empty . 3)
          (:human-date . 12)
          (:flags . 8)
          (:mailing-list . 20)
          (:from . 25)
          (:subject)))
#+end_src

**** Account Header
#+begin_src emacs-lisp
;(add-to-list 'mu4e-header-info-custom
;               '(:account
;                 :name "Account"
;                 :shortname "Account"
;                 :help "Which account this email belongs to"
;                 :function
;                 (lambda (msg)
;                   (let ((maildir (mu4e-message-field msg :maildir)))
;                     (format "%s" (substring maildir 1 (string-match-p "/" maildir 1)))))))
#+end_src

*** Fancy Icons
#+begin_src emacs-lisp
 (setq mu4e-use-fancy-chars t
        mu4e-headers-draft-mark '("D" . "")
        mu4e-headers-flagged-mark '("F" . "")
        mu4e-headers-new-mark '("N" . "")
        mu4e-headers-passed-mark '("P" . "")
        mu4e-headers-replied-mark '("R" . "")
        mu4e-headers-seen-mark '("S" . "")
        mu4e-headers-trashed-mark '("T" . "")
        mu4e-headers-attach-mark '("a" . "")
        mu4e-headers-encrypted-mark '("x" . "")
        mu4e-headers-signed-mark '("s" . "")
        mu4e-headers-unread-mark '("u" . ""))
#+end_src

** Org-Mime
:PROPERTIES:
:header-args: :tangle no
:END:
Org-mime allows me to use org-mode to write emails in org-mode.
#+begin_src emacs-lisp
(use-package org-mime
  :config
  (setq org-mime-export-options '(:section-numbers nil
                                  :with-author nil
                                  :with-toc nil))
(evil-define-key 'normal mu4e-compose-mode-map (kbd "t o") 'org-mime-edit-mail-in-org-mode))
#+end_src

*** Hooks 
**** Add Custom CSS
I want my code to be on a dark background.
#+begin_src emacs-lisp
(add-hook 'org-mime-html-hook
          (lambda ()
            (org-mime-change-element-style
            "pre" (format "color: %s; background-color: %s; padding: 0.5em;"
                          "#E6E1DC" "#232323"))))
#+end_src

**** Write In Org, Send HTML
I want to write my emails in org-mode and send them as HTML formatted emails.
#+begin_src emacs-lisp
(add-hook 'mu4e-compose-mode-hook 'org-mime-edit-mail-in-org-mode) ;; write in org-mode
(add-hook 'message-send-hook 'org-mime-htmlize) ;; write email in org-mode
(add-hook 'message-send-hook 'org-mime-confirm-when-no-multipart) ;; send message when htmlize hasn't been called
#+end_src

** Helpers
*** Mark All As Read
I want to mark something as read. In addition, I want to bind it to "A" so all unread messages will be marked unread.
#+begin_src emacs-lisp
(defun mu4e-headers-mark-all-unread-read ()
  "Put a ! \(read) mark on all visible unread messages"
  (interactive)
  (mu4e-headers-mark-for-each-if
   (cons 'read nil)
   (lambda (msg param)
     (memq 'unread (mu4e-msg-field msg :flags)))))

(defun mu4e-headers-flag-all-read ()
  "Flag all visible messages as \"read\""
  (interactive)
  (mu4e-headers-mark-all-unread-read)
  (mu4e-mark-execute-all t))

(evil-define-key 'normal mu4e-headers-mode-map (kbd "A") 'mu4e-headers-mark-all-unread-read)
#+end_src

** TODO Org-Msg
Org-msg allows me to write my emails in Org-mode. However, I get a lambda error any time I try to send an email with this package.
#+begin_src emacs-lisp :tangle no
  (use-package org-msg
    :config
    (setq org-msg-options "html-postamble:nil H:5 num:nil ^:{} toc:nil author:nil email:nil \\n:t"
	  org-msg-startup "hidestars indent inlineimages"
	  org-msg-greeting-name-limit 3
	  org-msg-default-alternatives '((new		. (text html))
					 (reply-to-html	. (text html))
					 (reply-to-text	. (text)))
	  org-msg-convert-citation t
	  org-msg-signature "
   ---
   Thanks,
   #+begin_signature
   *Jacob Hilker*
   #+end_signature")
  (org-msg-mode))
#+end_src

** TODO Mu4e Dashboard
#+begin_src emacs-lisp
(use-package mu4e-dashboard
  :straight (:host github :repo "rougier/mu4e-dashboard"))
#+end_src

*** TODO Sidebar

** Mu4e-Alert
#+begin_src emacs-lisp
(use-package mu4e-alert
  :config
  (mu4e-alert-enable-mode-line-display))
#+end_src

* Elfeed
Elfeed is an excellent package for reading RSS feeds in Emacs.
** Initial Setup
This is the initial setup for my elfeed config.
#+begin_src emacs-lisp
(use-package elfeed
  :config
  (setq elfeed-db-directory "~/.elfeed/"
	      elfeed-search-filter "@1-week-ago +unread ")
   (evil-define-key 'normal elfeed-search-mode-map 
    "A" 'elfeed-mark-all-as-read
    "f" 'jh/elfeed-search-hydra/body
    "/" 'elfeed-search-live-filter))
#+end_src

** Helpers
*** Hydra
I want to define a hydra for searching by various categories.
#+begin_src emacs-lisp
(defhydra jh/elfeed-search-hydra ()
  "Filter feeds" 
      ("d" (elfeed-search-set-filter "@1-week-ago +unread") "Default") 
      ("n" (elfeed-search-set-filter "@1-week-ago +unread +news") "News") 
      ("c" (elfeed-search-set-filter "@1-week-ago +unread +campaign") "Campaigns")  
      ("f" (elfeed-search-set-filter "@1-week-ago +unread +forum") "Forums")  

      ("p" (elfeed-search-set-filter "+podcast") "Podcasts")  
      ("r" (elfeed-search-set-filter "@1-week-ago +unread +reddit") "Reddit")  
      ("b" (elfeed-search-set-filter "@1-week-ago +unread +blog") "Blogs")  
      
      ("q" nil "quit" :color red))
#+end_src

*** Mark All As Read
This is a function that just marks all the articles as read.
#+begin_src emacs-lisp
(defun elfeed-mark-all-as-read ()
	(interactive)
  (mark-whole-buffer)
  (elfeed-search-untag-all-unread))
#+end_src

*** Update on Login
I want elfeed to update when I open it, rather than me having to manually update it.

** Elfeed Org
Elfeed org lets me use an org-mode file to keep track of my feeds.
#+begin_src emacs-lisp
(use-package elfeed-org
:after elfeed
:config
(elfeed-org)
(setq rmh-elfeed-org-files '("~/Dropbox/org/elfeed/feeds.org")))
#+end_src

** TODO Elfeed Dashboard
Elfeed dashboard lets me create a custom dashboard for running queries on articles.
#+begin_src emacs-lisp
(use-package elfeed-dashboard
  :straight (:host github :repo "Manoj321/elfeed-dashboard")
  :config
  (setq elfeed-dashboard-file "~/Dropbox/org/dashboard/elfeed.org"))

(evil-define-key 'normal elfeed-dashboard-mode-map
     "q" 'kill-current-buffer
    ;; "s" 'elfeed
     "U" 'elfeed-dashboard-update
     "u" (lambda () (interactive) (elfeed-dashboard-query "+unread")))
#+end_src

** Elfeed Goodies
Elfeed Goodies lets me have a nicer heading and layout for elfeed.
#+begin_src emacs-lisp
(use-package elfeed-goodies
  :config
  (elfeed-goodies/setup)
  (setq elfeed-goodies/entry-pane-size 0.5
        elfeed-goodies/feed-source-column-width 25
        elfeed-goodies/tag-column-width 20))
  
#+end_src

** Bindings
#+begin_src emacs-lisp
(evil-define-key 'normal elfeed-show-mode-map
  (kbd "J") 'elfeed-goodies/split-show-next
  (kbd "K") 'elfeed-goodies/split-show-prev)
(evil-define-key 'normal elfeed-search-mode-map
  (kbd "J") 'elfeed-goodies/split-show-next
  (kbd "K") 'elfeed-goodies/split-show-prev)
#+end_src

** Hooks
This is for custom hooks I want to use for Elfeed.
*** Update Elfeed
Originally from the emacs subreddit, I want to update elfeed every 10 minutes.
#+begin_src emacs-lisp
(add-hook 'emacs-startup-hook (lambda () (run-at-time 5 300 'elfeed-update)))
#+end_src

* TODO Spotify
I want to be able to use spotify in emacs.
#+begin_src emacs-lisp
#+end_src

* Writing Configuration
** Writeroom Mode
Writeroom mode hides any distracting elements from the screen so that I can focus on writing.
#+begin_src emacs-lisp
(use-package writeroom-mode)
#+end_src

* UI Tweaks
** Minimalistic UI
I really hate seeing the menu bar, scrollbar, etc.
#+begin_src emacs-lisp
(scroll-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(menu-bar-mode -1)
#+end_src

** Themes
The doom-themes collection has a lot of nice themes - I do overwrite some of the faces, though.
#+begin_src emacs-lisp
(use-package doom-themes)
(load-theme 'doom-gruvbox t)
#+end_src

** Fonts
I love Iosevka as a font. All the different variants help as well. I am also using Iosevka Aile for a variable-width font.

#+begin_src emacs-lisp
(set-face-attribute 'default nil :font (font-spec :family "Iosevka Nerd Font" :size 16)) 

(set-face-attribute 'fixed-pitch nil :font (font-spec :family "Iosevka Nerd Font" :size 16)) 
(set-face-attribute 'variable-pitch nil :font (font-spec :family "Iosevka Aile" :size 15))
(set-face-attribute 'font-lock-comment-face nil :slant 'italic)

(set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
(set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
;(set-face-attribute 'org-document-info-keyword nil :inherit 'fixed-pitch)
(set-face-attribute 'org-meta-line nil :inherit 'fixed-pitch)
(set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

(set-face-attribute 'org-hide nil :inherit 'fixed-pitch)
#+end_src

** Modeline
Doom modeline allows me to have a cleaner modeline.
#+begin_src emacs-lisp
(use-package doom-modeline
  :hook (after-init . doom-modeline-mode)
  :after mu4e-alert
  :config
  (setq doom-modeline-height 32
        doom-modeline-enable-word-count t
        doom-modeline-mu4e t
        doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode)
        doom-modeline--battery-status t))
#+end_src
*** TODO Custom Modeline
#+begin_src emacs-lisp
#+end_src

** Tabs
I really like centaur-tabs for my config.
#+begin_src emacs-lisp
(use-package centaur-tabs
  :init
  (centaur-tabs-mode t)
  :config
  (setq centaur-tabs-set-modified-marker t
	centaur-tabs-modified-marker "•"
	centaur-tabs-set-bar 'left
	centaur-tabs-set-icons t
	centaur-tabs-set-close-button t
	centaur-tabs-close-button "x"
	centaur-tabs-style "bar"
	centaur-tabs-cycle-scope 'tabs)
  :hook
  (mu4e-main-mode . centaur-tabs-local-mode)
  (mu4e-headers-mode . centaur-tabs-local-mode) 
  (mu4e-view-mode . centaur-tabs-local-mode)
  (elfeed-search-mode . centaur-tabs-local-mode)
  :bind
  (:map evil-normal-state-map
	("g t" . centaur-tabs-forward)
	("g T" . centaur-tabs-backward)))
#+end_src

* Functions
This section contains functions I have created that don't really fit in any other section.
** Config Functions
*** Edit Dotfile
This function lets me load my config so that I can edit it.
#+begin_src emacs-lisp
(defun edit-dotfile ()
"Loads the Jmacs config file to be edited."
(interactive)
(find-file "~/.emacs.d/jmacs.org"))
#+end_src

*** Reload Jmacs
#+begin_src emacs-lisp
(defun reload-jmacs ()
"Reloads the config."
(interactive)
(org-babel-load-file "~/.emacs.d/jmacs.org"))
#+end_src

** Startup Functions
*** Display Battery
*** Languages 
**** Org-mode
#+begin_src emacs-lisp

#+end_src

* Keybindings
This section serves to describe the keybindings of Jmacs.
** Leader Keys
Since I am using evil-mode, and I don't want to repeat my keybindings, I'm defining my prefix here.
#+begin_src emacs-lisp
(general-create-definer jh/evil-leader
   :states '(normal visual insert emacs)
   :prefix "SPC"
   :non-normal-prefix "C-SPC")
#+end_src

** General Keybindings
These are the core keybindings for functionality in jmacs. In addition, I want to use =SPC h F= for describing a face.
#+begin_src emacs-lisp
(global-set-key (kbd "C-h F") 'counsel-describe-face)

(jh/evil-leader
    "SPC" '(counsel-M-x :which-key "Run Command")
    "c"   (general-simulate-key "C-c" :which-key "Run C-c")
    "h"   (general-simulate-key "C-h")
    "u"   (general-simulate-key "C-u")
    "x"   (general-simulate-key "C-x"))
#+end_src

** Application Bindings
This opens applications.
#+begin_src emacs-lisp
(jh/evil-leader
   "a" '(:ignore t :which-key "Applications")
   "am" '(mu4e :which-key "Open Email")
   "an" '(elfeed :which-key "Open News Reader"))

#+end_src

** Buffer Keybindings
These keybindings are for switching buffers.
#+begin_src emacs-lisp
(jh/evil-leader
 "b"   '(:ignore t :which-key "Buffers")
 "bb"  'mode-line-other-buffer
 "bd"  'kill-this-buffer
 "bn"  'next-buffer
 "bp"  'previous-buffer
 "bq"  'kill-buffer-and-window
 "bR"  'rename-file-and-buffer
 "br"  'revert-buffer
 "bs" 'counsel-switch-buffer)
#+end_src

** File Keybindings
These are my keybindings for files.
#+begin_src emacs-lisp
(jh/evil-leader
   "f" '(:ignore t :which-key "Files")
   "fed" '(edit-dotfile :which-key "Edit Config")
   "ff" '(find-file :which-key "Find file")
   "fs" '(save-buffer :which-key "Save file")
   "fl" '(load-file :which-key "Load file"))

#+end_src

** Git Keybindings
#+begin_src emacs-lisp
(jh/evil-leader
"g" '(:ignore t :which-key "Magit")
"gs" 'magit-status
"gS" 'magit-stage-file
"gc" 'magit-commit
"gp" 'magit-pull
"gP" 'magit-push
"gb" 'magit-branch
"gB" 'magit-blame
"gd" 'magit-diff)
#+end_src

** Insert Keybindings
#+begin_src emacs-lisp
(jh/evil-leader
   "i" '(:ignore t :which-key "Insert special character")
   "ii" '(all-the-icons-insert :which-key "Insert icon")
   "ie" '(emojify-insert-emoji :which-key "Insert emoji"))
#+end_src

** Notes
#+begin_src emacs-lisp

#+end_src

** Org-Mode Keybindings
These are my general org-mode keybindings. 
#+begin_src emacs-lisp
(jh/evil-leader
   "o" '(:ignore t :which-key "Org-mode")
   "oa" '(org-agenda :which-key "Org Agenda")
   "oc" '(org-capture :which-key "Org Capture")
   "od" '(:ignore t :which-key "Set Date")
   "odd" '(org-deadline :which-key "Set deadline")
   "ods" '(org-schedule :which-key "Schedule date")
   "odt" '(org-time-stamp :which-key "Set date")
   "oq" '(counsel-org-tag :which-key "Set tags"))
#+end_src

** Toggle Keybindings
#+begin_src emacs-lisp
(jh/evil-leader

   "t" '(:ignore t :which-key "Toggle")
   ;"te" '(global-emojify-mode :which-key "Toggle emoji")
   "ts" '(treemacs :which-key "Toggle Treemacs")
   "to" '(imenu-list :which-key "Toggle Outline"))
#+end_src

** Reload Keybindings
#+begin_src emacs-lisp
(jh/evil-leader

   "r" '(:ignore t :which-key "Reload")
   "rr" '(reload-jmacs :which-key "Reload Jmacs"))
#+end_src

** Window Keybindings
#+begin_src emacs-lisp
(jh/evil-leader
 "w"  '(:ignore t :which-key "Windows")
 "w\\" '(split-window-right :which-key "Horizontal split")
 "w-" '(split-window-below :which-key "Vertical split")
 "wd"  '(delete-window :which-key "Delete window")
 "wD"  '(delete-other-windows :which-key "Delete other windows")
 "wm" '(maximize-window :which-key "Maximize window")
 "wh" '(evil-window-left :which-key "Move focus left")
 "wj" '(evil-window-down :which-key "Move focus down")
 "wk" '(evil-window-up :which-key "Move focus up")
 "wl" '(evil-window-right :which-key "Move focus right"))
#+end_src

** Quit Keybindings

#+begin_src emacs-lisp
(jh/evil-leader
 "q"  '(:ignore t :which-key "Quit")
 "qq" '(kill-emacs :which-key "Quit emacs")
 "qr" '(restart-emacs :which-key "Restart emacs"))
#+end_src

** Zoom In And Out
You can use Control plus = and Control plus - to zoom in and out like everywhere else.
#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
#+end_src
