#+title: Jmacs (Jacob's Literate Emacs Config)
#+author: Jacob Hilker

* Table of Contents :toc:
- [[#introduction-to-jmacs][*Introduction to JMACS*]]
  - [[#personal-info][Personal Info]]
- [[#package-setup][Package Setup]]
  - [[#using-melpa][Using Melpa]]
  - [[#using-org][Using Org]]
  - [[#most-important-packages][Most Important Packages]]
- [[#packages][Packages]]
  - [[#code-packages][Code Packages]]
  - [[#ui-packages][UI Packages]]
  - [[#org-mode-packages][Org Mode Packages]]
- [[#org-mode-config][Org Mode Config]]
  - [[#agenda-files][Agenda Files]]
  - [[#keywords][Keywords]]
  - [[#faces][Faces]]
  - [[#source-code-formatting][Source Code Formatting]]
- [[#ui-tweaks][UI Tweaks]]
  - [[#minimalist-ui][Minimalist UI]]
  - [[#fonts][Fonts]]
  - [[#org-mode-ui][Org Mode UI]]
  - [[#custom-faces][Custom Faces]]
- [[#keybindings][Keybindings]]
  - [[#general-keybindings][General Keybindings]]
- [[#minor-tweaks][Minor Tweaks]]
  - [[#disable-indent-on-newlines][Disable Indent on Newlines]]

* *Introduction to JMACS*
  Welcome to JMacs! This is a my personal configuration of emacs, for solo RPG campaigns like [[https://www.ironswornrpg.com/][Ironsworn]], writing (both prose and code), and for general use. I have organized this file into different sections, such as the functions I use, the UI settings, etc.
** Personal Info
   #+BEGIN_SRC emacs-lisp
(setq user-full-name "Jacob Hilker"
      user-mail-address "jacob.hilker2@gmail.com")
   #+END_SRC

* Package Setup
** Using Melpa
   I want to add melpa to my package list.
   #+begin_src emacs-lisp
(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives
	     '("melpa" . "https://melpa.org/packages/"))
(package-refresh-contents)
(package-initialize)
   #+END_src
** Using Org
   I want to add the org-mode repositories to my package list as well.
   #+begin_src emacs-lisp
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/"))
   #+end_src
** Most Important Packages
These are the most important functions I practically need to function in Emacs.
*** Use-Package
    Use-Package allows me to bootstrap my package loading very easily. 
    #+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(require 'use-package)
(setq use-package-always-ensure t)
    #+end_src
*** Evil Mode
    Evil mode lets me use the (superior) Vim bindings to the Emacs ones. In addition, I don't want =:q= to kill emacs, but rather the current buffer I am in (similar to Vim).
    #+begin_src emacs-lisp
(use-package evil
  :ensure t
  :init
  (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  (setq evil-want-keybinding nil)
  :config
  (evil-mode 1)
  :preface
  (defun ian/save-and-kill-this-buffer ()
    (interactive)
    (save-buffer)
    (kill-this-buffer))
  :config
  (with-eval-after-load 'evil-maps ; avoid conflict with company tooltip selection
    (define-key evil-insert-state-map (kbd "C-n") nil)
    (define-key evil-insert-state-map (kbd "C-p") nil))
  (evil-ex-define-cmd "q" #'kill-this-buffer)
  (evil-ex-define-cmd "wq" #'ian/save-and-kill-this-buffer))

(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init))

(use-package evil-surround
  :config
  (global-evil-surround-mode 1))
    #+end_src
*** General
    General lets me define my own keybindings.
    #+begin_src emacs-lisp
(use-package general)
    #+end_src
*** Org Plus Contrib
    The updated version of org-mode.
    #+begin_src emacs-lisp
(use-package org
  :ensure org-plus-contrib)
    #+end_src
**** <Key support
     #+begin_src emacs-lisp
(require 'org-tempo)
     #+end_src
*** Which-Key
Which-Key allows me to see the keybindings I have available at a glance.
#+begin_src emacs-lisp
(use-package which-key
:config
(which-key-mode 1))
#+end_src
* Packages
** Code Packages
   This section contains all the packages I use for code and for projects.
*** Projectile
    Projectile allows me to manage projects in emacs.
    #+begin_src emacs-lisp

    #+end_src
*** Completion Packages
**** Ivy
     #+begin_src emacs-lisp
(use-package ivy
 :config
 (setq ivy-count-format "(%d/%d) ")
 (ivy-mode 1))
#+end_src
**** Swiper
**** Counsel
*** Formatting Packages
    
** UI Packages
*** Themes
**** Gruvbox Theme
     What can I say, I love gruvbox.
     #+begin_src emacs-lisp
       (use-package gruvbox-theme)
       ;(load-theme 'gruvbox-dark-medium t)
     #+end_src
**** Doom Themes
     Doom Themes is an excellent collection of themes.
     #+begin_src emacs-lisp
(use-package doom-themes)
(setq doom-themes-enable-italic t
      doom-themes-enable-bold t)
(load-theme 'doom-gruvbox t)
     #+end_src
*** Doom Modeline
    This lets me set up a clean modeline.
    #+begin_src emacs-lisp
(use-package doom-modeline
  :config
  (setq doom-modeline-height 32))
(doom-modeline-mode 1)
    #+end_src
*** All The Icons
    All-the-icons allows me to have icons in emacs.
    #+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t)
    #+end_src
*** Dashboard
    Dashboard allows me to have a simple dashboard as a startup buffer.
    #+begin_src emacs-lisp
(use-package dashboard
  :config
  (dashboard-setup-startup-hook)) 
    #+end_src
    In addition to that, I'd like to use it as the default buffer when I start up emacsclient.
    #+begin_src emacs-lisp
(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
    #+end_src
** Org Mode Packages
*** Org Super Agenda
    Org Super agenda is such a nice package that I love to use. It essentially allows me to reorganize my agenda much more easily than in regular Elisp.
    #+begin_src emacs-lisp
    (use-package org-super-agenda
    :config
    (add-hook 'org-mode-hook 'org-super-agenda-mode))
    #+end_src
*** TOC Org
    This package allows me to add a table of contents to an org-mode file.
    #+begin_src emacs-lisp
(use-package toc-org
:config
(toc-org-mode 1))
    #+end_src
* Org Mode Config
** Agenda Files
I personally only use my class notes file and my personal agenda file as my agenda. I'm setting those up here.
#+begin_src emacs-lisp
(setq org-agenda-files (list "~/Dropbox/org/agenda.org" "~/Dropbox/notes/spring2021.org"))
#+end_src
** TODO Keywords
This is what I use for my to-do list keywords. Org-mode scheduling is probably the feature I use the most in org-mode. I want to set up my keywords here, so I donâ€™t need to do it in every file.
#+begin_src emacs-lisp
(setq org-todo-keywords '(
      (sequence "TODO(t)" "INPR(i)" "NEXT(n)" "MEET(m)" "|" "SOMEDAY(s)"   "DONE(d)" "CANCELED(c)")
      (type "PROJ(p)")
      (type "BLOG(b)")))
#+end_src
** TODO Faces
I want to set up specific colors for each keyword here. Red for todo, etc.
#+begin_src emacs-lisp
(setq org-todo-keyword-faces
 '(
   ("TODO" . (:foreground "#cc241d" :weight black :underline t))
   ("INPR" . (:foreground "#fe8019" :weight bold))
   ("NEXT" . (:foreground "#fabd2f" :weight black))
   ("MEET" . (:foreground "#b8bb26" :weight bold))
   ("PROJ" . (:foreground "#458588" :slant italic :weight bold))
   ("BLOG" . (:foreground "#83a598"))
   ("SOMEDAY" . (:foreground "#d3869b" :slant italic))
   ("DONE" . (:foreground "#83a598" :strike-through t))
   ("CANCELED" . (:foreground "cc241d" :strike-through t))))
;   ("DONE" . "green")

#+end_src
** Source Code Formatting
I don't like having org-mode auto indent code.
*** Preserving Indentation
This forces org-babel to save my indentation.
#+begin_src emacs-lisp
(setq org-src-preserve-indentation t)
#+end_src
*** Recognizing the Tab Key
I want my tab key to indent source code.
#+begin_src emacs-lisp
(setq org-src-tab-acts-natively t)
#+end_src
* UI Tweaks
  This section contains the general UI settings - not for any specific program.
** Minimalist UI
   Here is where I make my UI as minimalistic as possible. I am disabling
   my toolbars, tooltip-mode, menu-bar, and scroll-bar modes here.
   #+begin_src emacs-lisp
(scroll-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(menu-bar-mode -1)
   #+end_src
** Fonts
   I personally love Iosevka Nerd font.
*** Setting The Font Face
    #+begin_src emacs-lisp
(set-face-attribute 'default nil
  :font "Iosevka Nerd Font"
  :height 120)
    #+end_src
*** Increasing Font Size in Emacsclient
    #+begin_src emacs-lisp
;; Needed if using emacsclient. Otherwise, your fonts will be smaller than expected.
(add-to-list 'default-frame-alist '(font . "Iosevka Nerd Font-12"))
#+end_src
*** Adding Pretty Icons to Text
    This sets up so that something like =lamba= will be rendered as a pretty character.
    #+begin_src emacs-lisp
;; changes certain keywords to symbols, such as lamda!
(setq global-prettify-symbols-mode t)
    #+end_src

    #+end_src
*** Line Numbers and Truncated Lines
    #+begin_src emacs-lisp
(global-display-line-numbers-mode 1)
(global-visual-line-mode t)
    #+end_src
** Org Mode UI
** Custom Faces
*** Gruvbox Theme
I want the first four levels of headings to be bold.
#+begin_src emacs-lisp
;(set-face-attribute 'org-level-1 nil :weight 'bold)
;(set-face-attribute 'org-level-2 nil :weight 'bold )
;(set-face-attribute 'org-level-3 nil :weight 'bold )
;(set-face-attribute 'org-level-4 nil :weight 'bold)
#+end_src
*** Doom Gruvbox
I like having different colors for each face of a heading.
#+begin_src emacs-lisp
(set-face-attribute 'org-level-1 nil :foreground "#83a598")
(set-face-attribute 'org-level-2 nil :foreground "#d3869b")
(set-face-attribute 'org-level-3 nil :foreground "#fabd2f")
(set-face-attribute 'org-level-4 nil :foreground "#fb4934")
(set-face-attribute 'org-level-5 nil :foreground "#83a598" :weight 'regular)
(set-face-attribute 'org-level-6 nil :foreground "#d3869b" :weight 'regular)
(set-face-attribute 'org-level-7 nil :foreground "#fabd2f" :weight 'regular)
(set-face-attribute 'org-level-8 nil :foreground "#fb4934" :weight 'regular)
#+end_src
* Keybindings
** General Keybindings
     I want to use =Spc spc= for running =M-x=, etc. Similar to spacemacs.
     #+begin_src emacs-lisp
(general-define-key
   :states '(normal visual insert emacs)
   :prefix "SPC"
   :non-normal-prefix "C-SPC"

    "SPC" (general-simulate-key "M-x")
    "c"   (general-simulate-key "C-c")
    "h"   (general-simulate-key "C-h")
    "u"   (general-simulate-key "C-u")
    "x"   (general-simulate-key "C-x"))

     #+end_src

* Minor Tweaks
** Disable Indent on Newlines
   If I really wanted to indent newlines, I'd do it myself.
#+begin_src emacs-lisp
  (setq electric-indent-mode nil)
   #+end_src
   
