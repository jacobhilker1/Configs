#+title: Jmacs (Jacob's Literate Emacs Config)
#+author: Jacob Hilker
#+startup: fold
#+property: header-args :tangle jmacs.el

Welcome to JMacs! This is a my personal configuration of emacs, for solo RPG campaigns like [[https://www.ironswornrpg.com/][Ironsworn]], writing (both prose and code), and for general use. I have organized this file into different sections, such as the functions I use, the UI settings, etc.

* Early Initialization
:properties:
:header-args: :tangle early-init.el 
:end:
** Disabling Package.el 
By default, I want to use straight.el as my package manager.
#+begin_src emacs-lisp
(setq package-enable-at-startup nil)
#+end_src

* General Initialization
:properties:
:header-args: :tangle init.el
:end:
** Setting Up Straight.el
I am using straight.el for my packages.
#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
    (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
    (bootstrap-version 5))
(unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
        "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
        'silent 'inhibit-cookies)
    (goto-char (point-max))
    (eval-print-last-sexp)))
(load bootstrap-file nil 'nomessage))
#+end_src

** Setting Up Use-Package with Straight.el
Use-package provides an easy-to-use macro - I like that, but want the functionality of straight.el.
#+begin_src emacs-lisp
(straight-use-package 'use-package)
#+end_src

And finally, I always want it to use straight.el.
#+begin_src emacs-lisp
(setq straight-use-package-by-default t)
#+end_src
** Org Mode
I want to use the newest version of org-mode instead of the one built in to emacs.
#+begin_src emacs-lisp
(straight-use-package '(org-plus-contrib :includes org))
#+end_src
And finally, I want to load the literate config.
#+begin_src emacs-lisp
(org-babel-load-file "~/.emacs.d/jmacs.org")
#+end_src





* Initial Setup
This is where I setup my initial personal information, as well as a minimal UI and enabling the visual bell.
#+begin_src emacs-lisp
(setq visible-bell t)
#+end_src

Now I want to disable automatic indentation with electric-indent-mode, and disable tabs.
#+begin_src emacs-lisp
(electric-indent-mode -1)
(setq-default indent-tabs-mode nil)
(setq tab-always-indent 'complete)
#+end_src

* Core Functionality
** Undo Tree
Undo Tree lets me use more of Evil mode's redo functionality.
#+begin_src emacs-lisp
(use-package undo-tree
:config
 (global-undo-tree-mode))
#+end_src

** Evil Mode
Evil mode lets me use the (superior) Vim bindings to the Emacs ones. In addition, I don’t want :q to kill emacs, but rather the current buffer I am in (similar to Vim).
*** Evil-mode Core
This is the core of evil mode.
#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-undo-system 'undo-tree)
  (setq evil-want-C-i-jump nil) 
  (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  (setq evil-want-keybinding nil)
  :config
  ;(evil-set-undo-system 'undo-tree)
  ;(setq evil-undo-system 'undo-tree)
  (evil-mode 1)
  :preface
  (defun ian/save-and-kill-this-buffer ()
    (interactive)
    (save-buffer)
    (kill-this-buffer))
  :config
  (with-eval-after-load 'evil-maps ; avoid conflict with company tooltip selection
    (define-key evil-insert-state-map (kbd "C-n") nil)
    (define-key evil-insert-state-map (kbd "C-p") nil))
  (evil-ex-define-cmd "q" #'kill-this-buffer)
  (evil-ex-define-cmd "wq" #'ian/save-and-kill-this-buffer))
#+end_src
*** Evil-mode Collection
This provides a collection of modules for using evil mode in other emacs programs.
#+begin_src emacs-lisp
(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))
#+end_src
** General
#+begin_src emacs-lisp
(use-package general)
#+end_src

** Which-Key
Which-key lets me see what keybindings I can use.
#+begin_src emacs-lisp
(use-package which-key
:config
(which-key-mode 1))
#+end_src

** Hydra
I want to use hydras for certain things - namely, elfeed filters.
#+begin_src emacs-lisp
(use-package hydra)
#+end_src

** Helpful
Helpful allows me to have a better view of a help buffer.
#+begin_src emacs-lisp
(use-package helpful
    :config
    (setq counsel-describe-function-function #'helpful-callable)
    (setq counsel-describe-variable-function #'helpful-variable))
#+end_src

** Treemacs
Treemacs allows me to set up a sidebar with project information.
#+begin_src emacs-lisp
(use-package treemacs
  :config
  (setq treemacs-persist-file "~/.emacs.d/.local/cache/treemacs.org"))
#+end_src
* IDE Configuration
** Completion Frameworks
*** Counsel
#+begin_src emacs-lisp
(use-package counsel
  :config
  (counsel-mode 1))
#+end_src

*** Ivy
#+begin_src emacs-lisp
(use-package ivy
  :defer 0.1
  :diminish
 :config
 (setq ivy-count-format "(%d/%d) ")
 (ivy-mode 1))
#+end_src

**** Ivy Posframe
Ivy Posframe makes it much easier to edit the ivy ui.
**** Ivy Rich
Ivy Rich will allow me to see more about each command
#+begin_src emacs-lisp
  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))
#+end_src

*** Swiper
#+begin_src emacs-lisp
 (use-package swiper
:after ivy)
#+end_src

*** Company

** Projectile
** Magit
** Smartparens
#+begin_src emacs-lisp
(use-package smartparens
  :config
  (smartparens-mode))
#+end_src

* Org Mode
** General Customization

#+begin_src emacs-lisp
(setq org-agenda-files '("~/Dropbox/org/agenda.org" "~/Dropbox/notes/spring2021.org")
        org-todo-keywords '(
            (sequence "TODO(t)" "INPR(i)" "NEXT(n)" "MEET(m)" "|" "SOMEDAY(s)"   "DONE(d)" "CANCELED(c)")
            (type "PROJ(p)")
            (type "BLOG(b)"))
        org-ellipsis " ▼ "
        org-todo-keyword-faces
        '(
          ("TODO" . (:foreground "#cc241d" :weight black :underline t))
          ("INPR" . (:foreground "#fe8019" :weight bold))
          ("NEXT" . (:foreground "#fabd2f" :weight black))
          ("MEET" . (:foreground "#b8bb26" :weight bold))
          ("PROJ" . (:foreground "#458588" :slant italic :weight bold))
          ("BLOG" . (:foreground "#83a598"))
          ("SOMEDAY" . (:foreground "#d3869b" :slant italic))
          ("DONE" . (:foreground "#83a598" :strike-through t))
          ("CANCELED" . (:foreground "cc241d" :strike-through t))))
;   ("DONE" . "green"))
#+end_src

** UI Tweaks
I want to hide formatting characters and leading stars.
#+begin_src emacs-lisp
(setq org-hide-emphasis-markers t
      org-hide-leading-stars t)
#+end_src

*** Clearer Faces
I like having different colors for faces.
#+begin_src emacs-lisp
(set-face-attribute 'org-level-1 nil :foreground "#83a598")
(set-face-attribute 'org-level-2 nil :foreground "#d3869b")
(set-face-attribute 'org-level-3 nil :foreground "#fabd2f")
(set-face-attribute 'org-level-4 nil :foreground "#fb4934")
(set-face-attribute 'org-level-5 nil :foreground "#83a598")
(set-face-attribute 'org-level-6 nil :foreground "#d3869b")
(set-face-attribute 'org-level-7 nil :foreground "#fabd2f")
(set-face-attribute 'org-level-8 nil :foreground "#fb4934")
#+end_src

** Org Tempo
Org Tempo lets me use <s(tab) to insert blocks into an org-mode document.

#+begin_src emacs-lisp
(use-package org-tempo
    :straight nil
    :ensure nil)
#+end_src
*** Custom Keywords
This is where I want to add custom keywords for shortcut completion.
#+begin_src emacs-lisp

#+end_src

** Org Superstar
Org Superstar lets me use nicer bullets for my headers and formatting.
#+begin_src emacs-lisp
(use-package org-superstar
  :config
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
  (setq org-superstar-headline-bullets-list '("⚫" "○")))
#+end_src

* Mu4e
* Elfeed
Elfeed is an excellent package for reading RSS feeds in Emacs.
#+begin_src emacs-lisp
(use-package elfeed)
#+end_src

** Elfeed Org
Elfeed org lets me use an org-mode file to keep track of my feeds.
#+begin_src emacs-lisp
(use-package elfeed-org
:after elfeed
:config
(elfeed-org)
(setq rmh-elfeed-org-files '("~/Dropbox/org/elfeed.org")))
#+end_src

* UI Tweaks
** Minimalistic UI
I really hate seeing the menu bar, scrollbar, etc.
#+begin_src emacs-lisp
(scroll-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(menu-bar-mode -1)
#+end_src

** Fonts
I love Iosevka as a font. All the different variants help as well.
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "Iosevka Nerd Font" :height 120)
  (set-face-attribute 'org-meta-line nil :inherit 'default)
#+end_src

*** Variable Width
I like Iosevka Aile as a variable width font for content.
#+begin_src emacs-lisp
(set-face-attribute 'variable-pitch nil :font "Iosevka Aile" :height 120)
#+end_src

*** Italics for Comments
#+begin_src emacs-lisp

#+end_src

** Themes
The doom-themes collection has a lot of nice themes - I do overwrite some of the faces, though.
#+begin_src emacs-lisp
(use-package doom-themes)
(load-theme 'doom-gruvbox t)
#+end_src

** Modeline
Doom modeline allows me to have a cleaner modeline.

#+begin_src emacs-lisp
(use-package doom-modeline
  :config
  (setq doom-modeline-height 32))
(doom-modeline-mode 1)
#+end_src

* Keybindings
This section serves to describe the keybindings of Jmacs.
** General Keybindings
These are the core keybindings for functionality in jmacs.
#+begin_src emacs-lisp
(general-define-key
   :states '(normal visual insert emacs)
   :prefix "SPC"
   :non-normal-prefix "C-SPC"

    "SPC" '(counsel-M-x :which-key "M-x")
    "c"   (general-simulate-key "C-c")
    "h"   (general-simulate-key "C-h")
    "u"   (general-simulate-key "C-u")
    "x"   (general-simulate-key "C-x"))
#+end_src

* Minor Tweaks
** Tab in Insert Mode Indents
I want to insert indents myself.
#+begin_src emacs-lisp
(setq org-src-preserve-indentation t
      org-src-fontify-natively t
      org-src-tab-acts-natively t
      tab-width 4)

#+end_src
