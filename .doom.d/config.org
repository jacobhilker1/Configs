+TITLE: Jacob's Doom Emacs Config
#+author: Jacob Hilker
#+description: Jacob's Doom Emacs config.
#+property: header-args :tangle config.el
#+startup: fold

* Personal Info
#+begin_src emacs-lisp
(setq user-full-name "Jacob Hilker"
      user-mail-address "jacob.hilker2@gmail.com")
#+end_src

* UI Tweaks
** Theme
I really like gruvbox.
#+begin_src emacs-lisp
  (setq doom-theme 'doom-gruvbox)
#+end_src

** Fonts
I personally like Iosevka as a monospace font. In addition, I need to find a good font for variable widths.
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Iosevka Nerd Font" :size 14)
      doom-variable-pitch-font (font-spec :family "Alegreya" :size 14))

(after! doom-themes
  (setq
   doom-themes-enable-bold t
   doom-themes-enable-italic t))
#+end_src

*** Italics for Comments
#+begin_src emacs-lisp
(set-face-attribute 'font-lock-comment-face nil
  :slant 'italic)
#+end_src

* Minor Tweaks
** Relative Line Numbers
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
#+end_src

* Org-Mode
** General Config
#+begin_src emacs-lisp
(after! org
(setq
 org-directory "~/Dropbox/org/"
 org-agenda-files '("~/Dropbox/org/agenda.org" "~/Dropbox/notes/spring2021.org")
 org-deadline-warning-days 0
 org-todo-keywords '(
      (sequence "TODO(t)" "INPR(i)" "NEXT(n)" "MEET(m)" "|" "SOMEDAY(s)"   "DONE(d)" "CANCELED(c)")
      (type "PROJ(p)")
      (type "BLOG(b)"))
 org-todo-keyword-faces
    '(("TODO" . (:foreground "#cc241d" :weight black :underline t))

   ("INPR" . (:foreground "#fe8019" :weight bold))
    ("NEXT" . (:foreground "#fabd2f" :weight black))
    ("MEET" . (:foreground "#b8bb26" :weight bold))
   ("PROJ" . (:foreground "#458588" :slant italic :weight bold))
   ("BLOG" . (:foreground "#83a598"))
   ("SOMEDAY" . (:foreground "#d3869b" :slant italic))
   ("DONE" . (:foreground "#83a598" :strike-through t))
   ("CANCELED" . (:foreground "cc241d" :strike-through t)))
 )
)
#+end_src

*** Custom Agenda Commands
#+begin_src emacs-lisp
(after! org-super-agenda
(org-super-agenda-mode))
#+end_src
**** Planner
#+begin_src emacs-lisp
(add-to-list 'org-agenda-custom-commands
	     '("p" "Planner"
	       (
		(agenda "" ((org-agenda-span 'day)
			    (org-agenda-use-time-grid t)
			    (org-agenda-time-grid '((daily today weekly require-timed)()() "" nil))
			    (org-agenda-show-all-dates t)
			    (org-agenda-compact-blocks nil)
			    (org-agenda-overriding-header "")
			    (org-agenda-start-day "+0d")
			    (org-super-agenda-groups
			     '(
			       (:name "Habits"
				      :habit t
				      :category "HABIT"
				      :order 2)

			       (:name "Chores"
				      :habit t
				      :category "CHORE"
				      :order 2)


			       (:name none
				      :discard (:todo "DONE")
				      :time-grid t
				      :date today
				      :scheduled today
				      :deadline today
				      :order 1)))))

                   (agenda "" ((org-agenda-overriding-header "Coming Up Soon")
                       ;(org-agenda-prefix-format '((todo . " %i %-22:c %t %22(org-entry-get nil \"TIMESTAMP\")")))
;                       (org-agenda-skip-function '(org-agenda-skip-entry-if 'nottimestamp))
	                ;
                      ; (org-agenda-use-time-grid nil)
                      ; (org-agenda-time-grid '((daily today weekly require-timed)()() "----------------------" nil))
		               (org-agenda-start-day "+1d")
     ;                   (org-agenda-todo-ignore-with-date t)
                      ; (org-agenda-format-date "\n%d %b (%a.)\n")

									 (org-agenda-time-grid '((daily today weekly require-timed)()() "" nil))
                   (org-agenda-format-date "\n%d %b (%a.)")
			;		   (concat (make-string (window-width) 9472) "\n")
             ;         (org-agenda-compact-blocks t)
                   (org-agenda-span 2)
																				;(org-agenda-format-date "%d %b")
                   (org-super-agenda-groups
                    '(

                      (:name "Habits"
                         :habit t
                         :category "HABIT"
                         :order 6)

                         (:name "Chores"
                         :habit t
                         :category "CHORE"
                         :order 6)


     ;                 (:name "Projects"
     ;                 :category "PROJECT"
     ;                 :order 5)


    (:name "Personal"
    :category ("WRITING" "CAMPAIGN" "PERSONAL" "NANO" "UMWCLUB")
    :order 4)

;
;    (:name "Someday"
;     :and (:not (:category ("WRITING" "CAMPAIGN" "PERSONAL" "NANO")) :todo "SOMEDAY")
;     :order 5)

    (:name "Overdue"
      :deadline past
      :scheduled past
      :face '(:foreground "red")
      :order 3)
;
;
    (:name "Classwork and Meetings"
     :category ("CPSC430" "DGST101" "CPSC414" "CPSC444" "MEETING")
     :order 1)))))

				 (alltodo "" ((org-agenda-overriding-header "To Do")
                  (org-agenda-skip-function '(org-agenda-skip-entry-if 'timestamp))
                  (org-agenda-sorting-strategy '(todo-state-up category-up ))
                  (org-super-agenda-groups '(
                  (:name "Classwork and Meetings"
                  :category ("CLAS204" "CPSC405" "CPSC419" "CPSC445" "MEETING" "CLASSES")
                  :order 1)

                  (:name "Personal"
                  :category ("WRITING" "CAMPAIGN" "PERSONAL" "NANO" "UMWCLUB")
                  :order 2)

                  (:name "Projects"
                   :todo "PROJECT"
                   :category "PROJECT"
                   :order 3)


                 (:discard (:category "HABIT"))
                 (:discard (:category "CHORE")))))))))(add-to-list 'org-agenda-custom-commands
	     '("p" "Planner"
	       (
		(agenda "" ((org-agenda-span 'day)
			    (org-agenda-use-time-grid t)
			    (org-agenda-time-grid '((daily today weekly require-timed)()() "" nil))
			    (org-agenda-show-all-dates t)
			    (org-agenda-compact-blocks nil)
			    (org-agenda-overriding-header "")
			    (org-agenda-start-day "+0d")
			    (org-super-agenda-groups
			     '(
			       (:name "Habits"
				      :habit t
				      :category "HABIT"
				      :order 2)

			       (:name "Chores"
				      :habit t
				      :category "CHORE"
				      :order 2)


			       (:name none
				      :discard (:todo "DONE")
				      :time-grid t
				      :date today
				      :scheduled today
				      :deadline today
				      :order 1)))))

                   (agenda "" ((org-agenda-overriding-header "Coming Up Soon")
                       ;(org-agenda-prefix-format '((todo . " %i %-22:c %t %22(org-entry-get nil \"TIMESTAMP\")")))
;                       (org-agenda-skip-function '(org-agenda-skip-entry-if 'nottimestamp))
	                ;
                      ; (org-agenda-use-time-grid nil)
                      ; (org-agenda-time-grid '((daily today weekly require-timed)()() "----------------------" nil))
		               (org-agenda-start-day "+1d")
     ;                   (org-agenda-todo-ignore-with-date t)
                      ; (org-agenda-format-date "\n%d %b (%a.)\n")

									 (org-agenda-time-grid '((daily today weekly require-timed)()() "" nil))
                   (org-agenda-format-date "\n%d %b (%a.)")
			;		   (concat (make-string (window-width) 9472) "\n")
             ;         (org-agenda-compact-blocks t)
                   (org-agenda-span 2)
																				;(org-agenda-format-date "%d %b")
                   (org-super-agenda-groups
                    '(

                      (:name "Habits"
                         :habit t
                         :category "HABIT"
                         :order 6)

                         (:name "Chores"
                         :habit t
                         :category "CHORE"
                         :order 6)


     ;                 (:name "Projects"
     ;                 :category "PROJECT"
     ;                 :order 5)


    (:name "Personal"
    :category ("WRITING" "CAMPAIGN" "PERSONAL" "NANO" "UMWCLUB")
    :order 4)

;
;    (:name "Someday"
;     :and (:not (:category ("WRITING" "CAMPAIGN" "PERSONAL" "NANO")) :todo "SOMEDAY")
;     :order 5)

    (:name "Overdue"
      :deadline past
      :scheduled past
      :face '(:foreground "red")
      :order 3)
;
;
    (:name "Classwork and Meetings"
     :category ("CPSC430" "DGST101" "CPSC414" "CPSC444" "MEETING")
     :order 1)))))

				 (alltodo "" ((org-agenda-overriding-header "To Do")
                  (org-agenda-skip-function '(org-agenda-skip-entry-if 'timestamp))
                  (org-agenda-sorting-strategy '(todo-state-up category-up ))
                  (org-super-agenda-groups '(
                  (:name "Classwork and Meetings"
                  :category ("CLAS204" "CPSC405" "CPSC419" "CPSC445" "MEETING" "CLASSES")
                  :order 1)

                  (:name "Personal"
                  :category ("WRITING" "CAMPAIGN" "PERSONAL" "NANO" "UMWCLUB")
                  :order 2)

                  (:name "Projects"
                   :todo "PROJECT"
                   :category "PROJECT"
                   :order 3)


                 (:discard (:category "HABIT"))
                 (:discard (:category "CHORE")))))))))
#+end_src
***** Helper Functions
#+begin_src emacs-lisp
(defun jh/open-planner ()
 (interactive)
 (org-agenda nil "p"))
#+end_src

** Keybindings
*** Babel
#+begin_src emacs-lisp
(map! :leader
      :desc "Org babel tangle" "m B" #'org-babel-tangle)
#+end_src
*** Open Planner
#+begin_src emacs-lisp
(map! :leader
      (:prefix ("o" . "open")
       :desc "Open agenda" "a" #'jh/open-planner))
#+end_src

** Prettifying Org-Mode
*** Better Faces
#+begin_src emacs-lisp
(after! org
  (custom-set-faces!
    '(org-level-1  :inherit outline-1 :foreground "#83a598")
    '(org-level-2  :inherit outline-3 :foreground "#d3869b")
    '(org-level-3  :inherit outline-2 :foreground "#fabd2f")
    '(org-level-4  :inherit outline-4 :foreground "#fb4934")
    '(org-level-5  :inherit outline-5 :foreground "#83a598")
    '(org-level-6  :inherit outline-6 :foreground "#d3869b")
    '(org-level-7  :inherit outline-7 :foreground "#fabd2f")
    '(org-level-8  :inherit outline-8 :foreground "#fb4934")))
#+end_src

*** Better Ellipsis
I want to see an arrrow instead of an ellipsis.
#+begin_src emacs-lisp
(after! org
(setq org-ellipsis " ▼ "))
#+end_src

* Magit
** Keybindings
#+begin_src emacs-lisp
(map! :leader
      (:prefix ("g" . "git")
       :desc "Stage hunk" "h" #'git-gutter:stage-hunk
       :desc "Stage file" "H" #'magit-stage-file
       :desc "Magit status" "s" #'magit-status))
#+end_src

* Mu4e
#+begin_src emacs-lisp
(add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e") ;; On Ubuntu
  (require 'mu4e);; on Ubuntu

  (require 'org-mu4e) ;; On Ubuntu
(setq mu4e-maildir "~/.local/share/mail")
(setq mu4e-contexts
	(list
	 ;; Primary personal account
	 (make-mu4e-context
	  :name "jhilker2"
	  :match-func
	    (lambda (msg)
	      (when msg
		(string-prefix-p "/jacob.hilker2" (mu4e-message-field msg :maildir))))
	  :vars '((user-mail-address . "jacob.hilker2@gmail.com")
		  (user-full-name    . "Jacob Hilker")
		  (smtpmail-smtp-server  . "smtp.gmail.com")
        (mu4e-get-mail-func "mbsync jacob.hilker2@gmail.com")
		  (smtpmail-smtp-service . 465)
		  (smtpmail-stream-type  . ssl)
		  (mu4e-drafts-folder  . "/jacob.hilker2@gmail.com/[Gmail]/Drafts")
		  (mu4e-sent-folder  . "/jacob.hilker2@gmail.com/[Gmail]/Sent Mail")
		  (mu4e-refile-folder  . "/jacob.hilker2@gmail.com/[Gmail]/All Mail")
		  (mu4e-trash-folder  . "/jacob.hilker2@gmail.com/[Gmail]/Trash")))))

#+end_src

* General Keybindings
#+begin_src emacs-lisp
(map! :leader
      :desc "Open like spacemacs" "SPC" #'counsel-M-x)
#+end_src
