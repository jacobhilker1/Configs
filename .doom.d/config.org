#+TITLE: Jacob's Doom Emacs Config
#+author: Jacob Hilker
#+description: Jacob's Doom Emacs config.
#+property: header-args :tangle config.el

* Personal Info
#+begin_src emacs-lisp
(setq user-full-name "Jacob Hilker"
      user-mail-address "jacob.hilker2@gmail.com")
#+end_src
* UI Tweaks
** Theme
#+begin_src elisp
(setq doom-theme 'doom-gruvbox)
#+end_src
** Ellipsis
I like a little arrow instead of a regular ellipsis.
#+begin_src emacs-lisp
(setq org-ellipsis "â¤µ")
#+end_src

* Org Mode Config
I like to keep my org-mode stuff in Dropbox. In addition, I like to use my notes file and my regular genda as my agenda files. I also have other todo keywords and faces for those keywords.
#+begin_src emacs-lisp
(after! org
(setq
 org-directory "~/Dropbox/org/"
 org-agenda-files '("~/Dropbox/org/agenda.org" "~/Dropbox/notes/spring2021.org")
 org-deadline-warning-days 0
 org-todo-keywords '(
      (sequence "TODO(t)" "INPR(i)" "NEXT(n)" "MEET(m)" "|" "SOMEDAY(s)"   "DONE(d)" "CANCELED(c)")
      (type "PROJ(p)")
      (type "BLOG(b)"))
 org-todo-keyword-faces
    '(("TODO" . (:foreground "#cc241d" :weight black :underline t))

   ("INPR" . (:foreground "#fe8019" :weight bold))
    ("NEXT" . (:foreground "#fabd2f" :weight black))
    ("MEET" . (:foreground "#b8bb26" :weight bold))
   ("PROJ" . (:foreground "#458588" :slant italic :weight bold))
   ("BLOG" . (:foreground "#83a598"))
   ("SOMEDAY" . (:foreground "#d3869b" :slant italic))
   ("DONE" . (:foreground "#83a598" :strike-through t))
   ("CANCELED" . (:foreground "cc241d" :strike-through t)))
 )
)

#+end_src
* Misc. Tweaks
** Line Numbers
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
#+end_src

* Package Configs
** Org-Super-Agenda
#+begin_src emacs-lisp
(after! org-super-agenda
(org-super-agenda-mode))
#+end_src
*** Custom Agenda Commands
**** Planner
#+begin_src emacs-lisp
 (setq org-agenda-custom-commands
              '(("p" "Planner"
                    (
                      (agenda "" ((org-agenda-span 'day)
                      (org-agenda-use-time-grid t)
                      (org-agenda-time-grid '((daily today weekly require-timed)()() "" nil))
                      (org-agenda-show-all-dates t)
                      (org-agenda-compact-blocks nil)
                      (org-agenda-overriding-header "")
                      (org-agenda-start-day "+0d")
                      (org-super-agenda-groups
                       '(
                           (:name "Habits"
                            :habit t
                            :category "HABIT"
                            :order 2)

                            (:name "Chores"
                            :habit t
                            :category "CHORE"
                            :order 2)



                               (:name none
                                :discard (:todo "DONE")
                                :time-grid t
                                :date today
                                :scheduled today
                                :deadline today
                                :order 1)))))

          (agenda "" ((org-agenda-overriding-header "Coming Up Soon")
	                ;
                      ; (org-agenda-use-time-grid nil)
                      (org-agenda-time-grid '((daily today weekly require-timed)()() "----------------------" nil))
		               (org-agenda-start-day "+1d")
     ;                   (org-agenda-todo-ignore-with-date t)
                      ; (org-agenda-format-date "\n%d %b (%a.)\n")

                       (org-agenda-format-date "\n%d %b (%a.)")
			;		   (concat (make-string (window-width) 9472) "\n")
             ;         (org-agenda-compact-blocks t)
                       (org-agenda-span 2)
                      ;(org-agenda-format-date "%d %b")
                       (org-super-agenda-groups
                         '(

                         (:name "Habits"
                         :habit t
                         :category "HABIT"
                         :order 6)

                         (:name "Chores"
                         :habit t
                         :category "CHORE"
                         :order 6)


     ;                 (:name "Projects"
     ;                 :category "PROJECT"
     ;                 :order 5)


    (:name "Personal"
    :category ("WRITING" "CAMPAIGN" "PERSONAL" "NANO" "UMWCLUB")
    :order 4)

;
;    (:name "Someday"
;     :and (:not (:category ("WRITING" "CAMPAIGN" "PERSONAL" "NANO")) :todo "SOMEDAY")
;     :order 5)

    (:name "Overdue"
      :deadline past
      :scheduled past
      :face '(:foreground "red")
      :order 3)
;
;
    (:name "Classwork and Meetings"
     :category ("CLAS204" "CPSC405" "CPSC419" "CPSC445" "MEETING")
     :order 1)))))

     (alltodo "" ((org-agenda-overriding-header "To Do")
                  (org-agenda-skip-function '(org-agenda-skip-entry-if 'timestamp))
                  (org-agenda-sorting-strategy '(todo-state-up category-up ))
                  (org-super-agenda-groups '(
                  (:name "Classwork and Meetings"
                  :category ("CLAS204" "CPSC405" "CPSC419" "CPSC445" "MEETING" "CLASSES")
                  :order 1)

                  (:name "Personal"
                  :category ("WRITING" "CAMPAIGN" "PERSONAL" "NANO" "UMWCLUB")
                  :order 2)

                  (:name "Projects"
                   :todo "PROJECT"
                   :category "PROJECT"
                   :order 3)


                 (:discard (:category "HABIT"))
                 (:discard (:category "CHORE"))

))))))))


;
 ;  (:name "Coming Up Soon"
 ;   :scheduled future
 ;   :deadline future
 ;   :date t))))

;
;    (org-agenda-max-todos 11)
;    ;(org-agenda-sorting-strategy '( ts-up category-up todo-state-up))
#+end_src
**** Week Ahead
#+begin_src emacs-lisp
(add-to-list 'org-agenda-custom-commands
'("w" "Week Ahead" (
                 (agenda "" ((org-agenda-span 'week)
                             (org-agenda-start-day "+1d")
                             (org-agenda-overriding-header "The Week Ahead"))))))
#+end_src
**** Default
#+begin_src emacs-lisp
(add-to-list 'org-agenda-custom-commands
'("n" "All Agendas and TODOs"
  (
   (agenda "")
   (alltodo "")
    )
))
#+end_src
** Elfeed
#+begin_src emacs-lisp
(after! elfeed-org)
(elfeed-org)
(setq elfeed-db-directory "~/.elfeed/")
(setq rmh-elfeed-org-files (list "~/Dropbox/elfeed/elfeed.org"))
(use-package! elfeed-goodies)
(elfeed-goodies/setup)
(setq
 elfeed-goodies/feed-source-column-width 30)
#+end_src
