#+TITLE: Jacob's Doom Emacs Config
#+author: Jacob Hilker
#+description: Jacob's Doom Emacs config.
#+property: header-args :tangle config.el
#+startup: overview

* Personal Info
#+begin_src emacs-lisp
(setq user-full-name "Jacob Hilker"
      user-mail-address "jacob.hilker2@gmail.com")
#+end_src
* UI Tweaks
** Hiding Formatting Characters
#+begin_src emacs-lisp
(setq org-hide-emphasis-markers t)
#+end_src
** Theme
I really like gruvbox.
#+begin_src elisp
  (setq doom-theme 'doom-gruvbox)
#+end_src
*** Better Faces
**** Org-Mode
I like having different colors for each face of a heading.
#+begin_src emacs-lisp
(after! org
  (custom-set-faces!
    '(org-level-1  :inherit outline-1 :foreground "#83a598")
    '(org-level-2  :inherit outline-3 :foreground "#d3869b")
    '(org-level-3  :inherit outline-2 :foreground "#fabd2f")
    '(org-level-4  :inherit outline-4 :foreground "#fb4934")
    '(org-level-5  :inherit outline-5 :foreground "#83a598" :weight regular)
    '(org-level-6  :inherit outline-6 :foreground "#d3869b" :weight regular)
    '(org-level-7  :inherit outline-7 :foreground "#fabd2f" :weight regular)
    '(org-level-8  :inherit outline-8 :foreground "#fb4934" :weight regular)))
#+end_src
*** Dashboard
** Ellipsis
I like a little arrow instead of a regular ellipsis.
#+begin_src emacs-lisp
(setq org-ellipsis "â¤µ")
#+end_src
** Fonts
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Iosevka Nerd Font" :size 14))
                                        ;doom-variable-pitch-font (font-spec :family "Roboto" :size 14))

(after! doom-themes
  (setq
   doom-themes-enable-bold t
   doom-themes-enable-italic t))
#+end_src
* Org Mode Config
I like to keep my org-mode stuff in Dropbox. In addition, I like to use my notes file and my regular genda as my agenda files. I also have other todo keywords and faces for those keywords.
#+begin_src emacs-lisp
(after! org
(setq
 org-directory "~/Dropbox/org/"
 org-agenda-files '("~/Dropbox/org/agenda.org" "~/Dropbox/notes/spring2021.org")
 org-deadline-warning-days 0
 org-todo-keywords '(
      (sequence "TODO(t)" "INPR(i)" "NEXT(n)" "MEET(m)" "|" "SOMEDAY(s)"   "DONE(d)" "CANCELED(c)")
      (type "PROJ(p)")
      (type "BLOG(b)"))
 org-todo-keyword-faces
    '(("TODO" . (:foreground "#cc241d" :weight black :underline t))

   ("INPR" . (:foreground "#fe8019" :weight bold))
    ("NEXT" . (:foreground "#fabd2f" :weight black))
    ("MEET" . (:foreground "#b8bb26" :weight bold))
   ("PROJ" . (:foreground "#458588" :slant italic :weight bold))
   ("BLOG" . (:foreground "#83a598"))
   ("SOMEDAY" . (:foreground "#d3869b" :slant italic))
   ("DONE" . (:foreground "#83a598" :strike-through t))
   ("CANCELED" . (:foreground "cc241d" :strike-through t)))
 )
)

#+end_src
** Export Backends
*** Hugo
I want to have ox-hugo as a backend.
* Misc. Tweaks
** Line Numbers
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
#+end_src

* Package Configs
** Org-Super-Agenda
#+begin_src emacs-lisp
(after! org-super-agenda
(org-super-agenda-mode))
#+end_src
*** Custom Agenda Commands
**** Planner
#+begin_src emacs-lisp
 (setq org-agenda-custom-commands
       '(("p" "Planner"
          (
           (agenda "" ((org-agenda-span 'day)
                       (org-agenda-use-time-grid t)
                       (org-agenda-time-grid '((daily today weekly require-timed)()() "" nil))
                       (org-agenda-show-all-dates t)
                       (org-agenda-compact-blocks nil)
                       (org-agenda-overriding-header "")
                       (org-agenda-start-day "+0d")
                       (org-super-agenda-groups
                        '(
                          (:name "Habits"
                           :habit t
                           :category "HABIT"
                           :order 2)

                          (:name "Chores"
                           :habit t
                           :category "CHORE"
                           :order 2)



                          (:name none
                           :discard (:todo "DONE")
                           :time-grid t
                           :date today
                           :scheduled today
                           :deadline today
                           :order 1)))))

           (agenda "" ((org-agenda-overriding-header "Coming Up Soon")
                                         ;
                                         ; (org-agenda-use-time-grid nil)
                       (org-agenda-time-grid '((daily today weekly require-timed)()() "----------------------" nil))
                       (org-agenda-start-day "+1d")
                                         ;                   (org-agenda-todo-ignore-with-date t)
                                         ; (org-agenda-format-date "\n%d %b (%a.)\n")

                       (org-agenda-format-date "\n%d %b (%a.)")
                                         ;		   (concat (make-string (window-width) 9472) "\n")
                                         ;         (org-agenda-compact-blocks t)
                       (org-agenda-span 2)
                                         ;(org-agenda-format-date "%d %b")
                       (org-super-agenda-groups
                        '(

                          (:name "Habits"
                           :habit t
                           :category "HABIT"
                           :order 6)

                          (:name "Chores"
                           :habit t
                           :category "CHORE"
                           :order 6)


                          (:name "Personal"
                           :category ("WRITING" "CAMPAIGN" "PERSONAL" "NANO" "UMWCLUB")
                           :order 4)

                                         ;
                                         ;    (:name "Someday"
                                         ;     :and (:not (:category ("WRITING" "CAMPAIGN" "PERSONAL" "NANO")) :todo "SOMEDAY")
                                         ;     :order 5)

                          (:name "Overdue"
                           :deadline past
                           :scheduled past
                           :face '(:foreground "red")
                           :order 3)
                                         ;
                                         ;
                          (:name "Classwork and Meetings"
                           :category ("CLAS204" "CPSC405" "CPSC419" "CPSC445" "MEETING")
                           :order 1)))))

           (alltodo "" ((org-agenda-overriding-header "To Do")
                        (org-agenda-skip-function '(org-agenda-skip-entry-if 'timestamp))
                        (org-agenda-sorting-strategy '(todo-state-up category-up ))
                        (org-super-agenda-groups '(
                                                   (:name "Classwork and Meetings"
                                                    :category ("CLAS204" "CPSC405" "CPSC419" "CPSC445" "MEETING" "CLASSES")
                                                    :order 1)

                                                   (:name "Personal"
                                                    :category ("WRITING" "CAMPAIGN" "PERSONAL" "NANO" "UMWCLUB")
                                                    :order 2)

                                                   (:name "Projects"
                                                    :todo "PROJECT"
                                                    :category "PROJECT"
                                                    :order 3)


                                                   (:discard (:category "HABIT"))
                                                   (:discard (:category "CHORE"))

                                                   ))))))))
#+end_src
**** Week Ahead
#+begin_src emacs-lisp
(add-to-list 'org-agenda-custom-commands
'("w" "Week Ahead" (
                 (agenda "" ((org-agenda-span 'week)
                             (org-agenda-start-day "+1d")
                             (org-agenda-overriding-header "The Week Ahead"))))))
#+end_src
**** Default
#+begin_src emacs-lisp
(add-to-list 'org-agenda-custom-commands
'("n" "All Agendas and TODOs"
  (
   (agenda "")
   (alltodo "")
    )
))
#+end_src
**** Helper Commands
***** Open Planner
#+begin_src emacs-lisp
(defun jh/open-planner ()
  (interactive)
  (org-agenda nil "p")
  )
#+end_src
***** Open Weekly Agenda
#+begin_src emacs-lisp
(defun jh/open-week-agenda ()
 (interactive)
 (org-agenda nil "w")
)
#+end_src
** Elfeed
#+begin_src emacs-lisp
(after! elfeed-org)
(elfeed-org)
(setq
 elfeed-db-directory "~/.elfeed/"
 rmh-elfeed-org-files (list "~/Dropbox/org/elfeed.org")
 elfeed-search-title-min-width 80
 ;elfeed-search-print-entry-function 'jh/elfeed-search-print-entry
 ;elfeed-search-header-function 'jh/elfeed-entry-header
 elfeed-search-filter "@1-week-ago +unread")
                                        ;elfeed-show-mode-hook
                                        ;(lambda ()
                                        ;           (set-face-attribute 'variable-pitch (selected-frame) :font (font-spec :family "Iosevka" :size 16))))
(use-package! elfeed-goodies)
                                        (elfeed-goodies/setup)
                                        ;(setq
                                        ; elfeed-search-header-function 'jh/elfeed-entry-header
                                        ; elfeed-goodies/tag-column-width 0
                                        ; elfeed-goodies/feed-source-column-width 30)
#+end_src
*** Usability Enhancements
**** Mark All As Read
#+begin_src emacs-lisp
(defun elfeed-mark-all-as-read ()
           (interactive)
           (mark-whole-buffer)
           (elfeed-search-untag-all-unread))
#+end_src

*** UI Enhancements
**** Faces
All the faces for here are based on my newsboat configuration.
***** Reddit Face
#+begin_src emacs-lisp
;(defface jh/reddit-elfeed-face
;'((t :foreground "#98971a"))
;  "Marks an Elfeed entry from reddit.")
;
;(push '(reddit jh/reddit-elfeed-face)
;      elfeed-search-face-alist)
#+end_src
***** Campaign Face
#+begin_src emacs-lisp
;(defface jh/campaign-elfeed-face
;'((t :foreground "#458588"))
;  "Marks an Elfeed entry from a campaign I'm in.")
;
;(push '(campaigns jh/campaign-elfeed-face)
;      elfeed-search-face-alist)

#+end_src
**** Layouts
***** Header Layout
#+begin_src emacs-lisp
(defun jh/elfeed-entry-header ()
  (cond
   ((zerop (elfeed-db-last-update))
    (elfeed-search--intro-header))
   ((> (elfeed-queue-count-total) 0)
    (let ((total (elfeed-queue-count-total))
          (in-process (elfeed-queue-count-active)))
      (format "%d jobs pending, %d active..."
              (- total in-process) in-process)))
   ((let* ((db-time (seconds-to-time (elfeed-db-last-update)))
           (update (format-time-string "%d %b. %Y %H:%M" db-time))
           (unread (elfeed-search--count-unread)))
      (format "%3s" "Title"
                                        ;(propertize update 'face 'elfeed-search-last-update-face)
                                        ;(propertize unread 'face 'elfeed-search-unread-count-face)
              (cond
               (elfeed-search-filter-active "")
               ((string-match-p "[^ ]" elfeed-search-filter)
                (concat ", " (propertize elfeed-search-filter
                                         'face 'elfeed-search-filter-face)))
               ("")))))))
#+end_src
***** Entry Layout
#+begin_src emacs-lisp
(defun jh/elfeed-search-print-entry (entry)
  "Print ENTRY to the buffer."
  (let* ((elfeed-goodies/tag-column-width 40)
         (elfeed-goodies/feed-source-column-width 30)
         (title (or (elfeed-meta entry :title) (elfeed-entry-title entry) ""))
         (title-faces (elfeed-search--faces (elfeed-entry-tags entry)))
         (feed (elfeed-entry-feed entry))
         (feed-title
          (when feed
            (or (elfeed-meta feed :title) (elfeed-feed-title feed))))
         (tags (mapcar #'symbol-name (elfeed-entry-tags entry)))
         (tags-str (concat (mapconcat 'identity tags ",")))

         (title-width (- (window-width) 10 elfeed-search-trailing-width))
         (title-column (elfeed-format-column
                        title (elfeed-clamp
                               elfeed-search-title-min-width
                               title-width
                               elfeed-search-title-max-width)
                        :left))

         (tag-column (elfeed-format-column
                      tags-str (elfeed-clamp (length tags-str)
                                             elfeed-goodies/tag-column-width
                                             elfeed-goodies/tag-column-width)
                      :left))

         (feed-column (elfeed-format-column
                       feed-title (elfeed-clamp elfeed-goodies/feed-source-column-width
                                                elfeed-goodies/feed-source-column-width
                                                elfeed-goodies/feed-source-column-width)
                       :left)))


    (insert (propertize title-column 'face title-faces 'kbd-help title) " ")
    (insert (propertize feed-column 'face 'elfeed-search-feed-face) " ")
    (insert (propertize tag-column 'face 'elfeed-search-tag-face) " ")
    (setq-local line-spacing 0.2)))
#+end_src
** Ox-Pandoc
#+begin_src emacs-lisp

#+end_src
** Mu4e
I want to try mu4e.
#+begin_src emacs-lisp
(add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
;; I have my mbsyncrc in a different folder on my system, to keep it separate from the
;; mbsyncrc available publicly in my dotfiles. You MUST edit the following line.
;; Be sure that the following command is: "mbsync -c ~/.config/mu4e/mbsyncrc -a"
(setq mu4e-maildir "~/.local/share/mail"
      mu4e-get-mail-command "mbsync -a"
      mu4e-update-interval  300
      mu4e-main-buffer-hide-personal-addresses t
      message-send-mail-function 'smtpmail-send-it
      starttls-use-gnutls t)
#+end_src
*** Account Setup
#+begin_src emacs-lisp

#+end_src
* Keybinds
** General Keybinds
#+begin_src emacs-lisp
(map! :leader
      :desc "Open like spacemacs" "SPC" #'counsel-M-x)
#+end_src
*** Agenda Keybindings
#+begin_src emacs-lisp
(map! :leader
      (:prefix ("o" . "open")
       :desc "Open agenda" "a" #'jh/open-planner
       :desc "Open week ahead" "w" #'jh/open-week-agenda))
#+end_src
** Org-Mode
#+begin_src elisp
(map! :leader
      (:prefix ("O" . "org-mode")
       :desc "Export org" "e" #'org-export-dispatch))
#+end_src
*** Babel
For extracting source code.
#+begin_src emacs-lisp
                                        (map! :leader
                                              :desc "Org babel tangle" "m B" #'org-babel-tangle)
#+end_src
** Elfeed
#+begin_src emacs-lisp
(map! :map elfeed-search-mode-map
      :after elfeed-search
      :n "A" #'elfeed-mark-all-as-read)

(map! :leader
      (:prefix-map ("n" . "newsreader")
        :desc "Check news" "n" #'elfeed ))
#+end_src
** TODO Magit
#+begin_src emacs-lisp
(map! :leader
      (:prefix ("g" . "git")
       :desc "Stage hunk" "h" #'git-gutter:stage-hunk
       :desc "Stage file" "H" #'magit-stage-file
       :desc "Magit status" "s" #'magit-status))
#+end_src
** TODO Zoom In and Out
#+begin_src emacs-lisp

#+end_src
